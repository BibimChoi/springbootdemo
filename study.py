# 다음과 같이 인쇄를 수행하는 코드를 작성하라
# 날짜를 ‘-’로 구분하여 다음과 같이 인쇄하도록 코드를 완성하라. sep키워드를 사용하여 구현한다
# 인쇄결과 : 2020-12-25

# print(                    )
#출력예시 2020-12-25

# 답
# print(2020,12,25,sep='-')

# -----------------------------------------------------------------------------------------------------


# 다음과 같이 인쇄를 수행하는 코드를 작성하라
# 다음 세 단어를 다음과 같이 인쇄되도록 코드를 수정하라. end 키워드를 사용하여 구현한다
# 인쇄 결과 : kim@codexpert.org

# * 다음은 python 입출력 템플릿으로 사용해도 무방함.

# # 코드를 작성하시오

# print( "kim" )
# print( "codexpert" ) 
# print( "org" )

# 출력예시 kim@codexpert.org

# 답
# print( "kim", end = "@" )
# print( "codexpert", end = "." ) 
# print( "org" )


# -----------------------------------------------------------------------------------------------------

# 다음 변수들을 이용하여 출력 예시와 같이 인쇄되도록 
# 주어진 코드의 print 함수에 sep, end 키워드를 이용하여 구현하라
# [주의] 공백까지도 주어진 출력 예시와 동일하여야 한다
# id = 100
# name = 'Kim'
# address = 'Seoul'
# age = 20
# height = 180
# weight = 72

# print(id, name, address, sep =      , end =    )
# print(age, height, weight, sep =     )

# 입력예시 없음
# 출력예시
# 100 : Kim : Seoul => 20, 180, 72

# 답
# id = 100
# name = 'Kim'
# address = 'Seoul'
# age = 20
# height = 180
# weight = 72
 
# print(id, name, address, sep = ' : ', end = ' => ')
# print(age, height, weight, sep = ', ') 
# -----------------------------------------------------------------------------------------------------

# 입력 예시
# 없음
# 출력 예시
# <class 'int'>
# <class 'float'>
# <class 'str'>

# 답
# a, b, c = 10, 3.14, "hello"
# print( type(a), type(b), type(c), sep = '\n' )
# -----------------------------------------------------------------------------------------------------
# 문제 설명
# 사번을 이용하여 야유회 팀 구성을 하기로 하였다.
# 팀은 총 10개 팀으로 구성하기로 하였으며 사번 끝자리를 이용하여 1팀 ~ 10팀까지 선정한다.
# 즉, 사번 끝이 0이면 1팀, 1이면 2팀, 2이면 3팀 ... 9이면 10팀으로 정한다
# 변수 a에 저장된 사번은 몇 팀인지 구하여 변수 no에 저장하는 코드를 설계하라
# a = 12345
# no = 
# print(no, 'team')

# 입력 예시
# 없음
# 출력 예시
# 6 team

# 답
# a = 12345
# no = a % 10 + 1
# print(no, 'team')
# -----------------------------------------------------------------------------------------------------
# 문제 설명
# 다음 코드를 설계하라
# 변수 n에 4자리 수가 저장되어 있다. 각 자리의 값을 d1, d2, d3, d4에 저장하다
# 즉, n이 1234일 경우 d1은 1 d2는 2 d3는 3 d4는 4가 저장되면 된다
# n = 1234
# d1 = 
# d2 =
# d3 =
# d4 = 
# print( d1, d2, d3, d4 )

# 입력 예시
# 없음
# 출력 예시
# 1 2 3 4

# 답
# n = 1234
# d1 = n // 1000 % 10
# d2 = n // 100 % 10
# d3 = n // 10 % 10
# d4 = n % 10
# print( d1, d2, d3, d4 )

# -----------------------------------------------------------------------------------------------------
# 변수 a에 저장된 값의 b자리 값을 계산하여 변수 c에 저장하는 코드를 설계하라
# 예를 들어 a에 1234가 저장되어 있고 b가 1일 경우 첫 번째 자리값인 4가 c에 저장된다.
# a가 1234일때 b가 4일 경우는 4번째 자리값인 1이 c에 저장되어야 한다.
# a = 1234
# b = 3
# c =
# print(c)

# 입력 예시
# 없음
# 출력 예시
# 2

# 답
# a = 1234
# b = 3
# c = a // (10 ** (b-1)) % 10
# print(c)
# -----------------------------------------------------------------------------------------------------

# 입력 받은 정수를 100원 미만 절사하여 인쇄하라
# 제품 가격(양의 정수) p를 100원 미만을 절사한 가격을 구하여 r에 대입한다.
# 즉, p가 12345 이면 100원 미만 절사하여 12300을 r에 저장한다 
# p = 12345678
# r = 
# print( r )

# 입력 예시
# 없음
# 출력 예시
# 12345600


# 답
# p = 12345678
# r = p // 100 * 100
# print( r )
 
# -----------------------------------------------------------------------------------------------------

# 다음과 같이 인쇄를 수행하는 코드를 작성하라
# 다음과 같이 디렉터리 정보를 인쇄하도록 코드를 수정하라
# 인쇄결과 : C:\temp
# * 다음은 python 입출력 템플릿으로 사용해도 무방함.

# # 코드를 작성하시오

# print(            )

# 출력 예시
# C:\temp

# 답
# print("C:\\temp")
# #print(r"C:\temp")
# -----------------------------------------------------------------------------------------------------

# 다음 코드의 인쇄 결과를 예측하고 코드를 수정하라
# 변수 a와 b에 각각 문자열 형식으로 저장된 숫자 값이 들어 있다
# 이들을 숫자로 볼 때 + 연산한 결과 값이 r에 저장되어 인쇄 되도록 하고 싶다
# a, b = '10', '20'
# r = a + b
# print(r)

# 즉, 코드 변경 후 r을 인쇄하면 결과는 10과 20이 더해진 30이 인쇄되어야 한다
# 코드를 수정하여 숫자끼리의 합 30이 출력되도록 하라

# 입력 예시
# 없음
# 출력 예시
# 30


# 답
# a, b = '10', '20'
# r = int(a) + int(b)
# print( r )
# -----------------------------------------------------------------------------------------------------

# 변수 p에 제품 가격이 t에 세율이 문자열 형식으로 저장되어 있다
# 변수 total에 판매 가격이 저장되도록 코드를 작성하라 (계산식) total = p + p * t / 100
# 단, 제품 가격은 특판 기간이라 1,000원 미만은 절사하여 계산된다
# p, t = '123456', '12.5'

# # 코드 작성

# print( total )

# 입력 예시
# 없음
# 출력 예시
# 138000

# 답
# p, t = '123456', '12.5'
 
# p, t = int(p), float(t)
# x = p + p * t / 100
# total = int(x // 1000 * 1000)
 
# print( total )
# -----------------------------------------------------------------------------------------------------

# 키보드로 두 정수를 한줄에 하나씩 입력 받아서 그 합을 인쇄하라

# 입력 예시
# 10
# 20
# 출력 예시
# 30

# 답
# a = int(input())
# b = int(input())
# print( a + b )
 
# -----------------------------------------------------------------------------------------------------
# 두 줄로 입력되는 문자열을 중간에 공백을 넣어서 인쇄하는 코드를 설계하라

# 입력 설명
# 문자열 2개가 한줄에 하나씩 입력된다
# 출력 설명
# 입력된 문자열 2개를 공백으로 연결하여 인쇄한다

# 입력 예시
# hello
# python
# 출력 예시
# hello python

# 답
# print(input() + ' ' + input())
# -----------------------------------------------------------------------------------------------------
# 문자열 하나(s)를 입력받고 다음 줄에 양의 정수(n) 하나를 입력받는다.
# 문자열 s를 n번 반복한 문자열을 인쇄하는 코드를 설계하라
# 입력 설명
# 첫 줄에 문자열 하나가 입력된다.
# 둘째 줄에 양의 정수 하나가 입력된다.
# 출력 설명
# 입력받은 문자열을 양의 정수 만큼 반복한 결과를 인쇄한다.

# 입력 예시
# hello
# 3
# 출력 예시
# hellohellohello

# 답
# print(input() * int(input()))
# -----------------------------------------------------------------------------------------------------
# 두개의 정수 a, b를 두 줄에 걸쳐서 입력 받는다.
# a를 b로 나눈 몫과 a를 b로 나눈 나머지를 인쇄하라

# 입력 예시
# 10
# 3
# 출력 예시
# 3 1

# 답
# a = int(input())
# b = int(input())
 
# print(a // b, a % b)
# -----------------------------------------------------------------------------------------------------

# 문제 설명
# 키보드로 공백으로 분리된 정수 3개를 입력 받아서 합을 인쇄하는 코드를 설계하라
# # 코드 작성

# print( s )

# 입력 예시
# 20 20 -5
# 출력 예시
# 35

# 답
# a, b, c = input().split()
# a, b, c = int(a), int(b), int(c)
# s = a + b + c
# print( s )
# -----------------------------------------------------------------------------------------------------
# 키보드로 첫 줄에 문자열 하나
# 다음 줄에 공백으로 분리된 정수 2개를 입력받아 
# 첫 줄에는 문자열
# 다음 줄에는 두 정수의 합을 인쇄하는 코드를 설계하라

# # 코드 작성

# print( s )
# print( a + b )

# 입력 예시
# 홍길동
# 10  20
# 출력 예시
# 홍길동
# 30

# 답
# s = input()
# a, b = input().split()
# a, b = int(a), int(b)
 
# print( s )
# print( a + b )
# -----------------------------------------------------------------------------------------------------
# 키보드로 공백으로 분리된 이름, 키, 나이를 입력 받아 인쇄하는 코드를 설계하라
# 이름(a)은 문자열 키(b)는 실수, 나이(c)는 정수로 받아야 한다
# 아래 템플릿 코드를 이용하여 설계하라
# 특히, 출력된 type이 a, b, c에 대하여 각각 str, float, int로 나와야 한다
# # 코드 작성

# print( type(a), type(b), type(c) )
# print( 'name = ', a, 'height = ', b, 'age = ', c )

# 입력 예시
# 홍길동  172.5  200
# 출력 예시
# <class 'str'> <class 'float'> <class 'int'>
# name =  홍길동 height =  172.5 age =  200

# 답
# a, b, c = input().split()
# b, c = float(b), int(c)
 
# print( type(a), type(b), type(c) )
# print( 'name = ', a, 'height = ', b, 'age = ', c )
# -----------------------------------------------------------------------------------------------------

# 한 줄에 공백으로 분리된 문자열 2개를 입력 받는다.
# 이 문자열을 서로 연결하여 인쇄하는 코드를 설계하라

# 입력 예시
# hello python
# 출력 예시
# hellopython

# 답
# a, b = input().split()
# print(a + b)
# -----------------------------------------------------------------------------------------------------

# 공백으로 분리된 문자열(s)과 양의 정수(n)가 한 줄로 입력된다.
# s를 n번 반복한 문자열을 인쇄하는 코드를 설계하라

# 입력 예시
# hi 3
# 출력 예시
# hihihi

# 답
# a, b = input().split()
# print(a * int(b))
# -----------------------------------------------------------------------------------------------------
# 차량번호 4자리(car)가 입력된다.
# 이 차량 번호의 5부제 요일코드를 인쇄하는 코드를 설계하라
# 요일 코드는 car의 끝자리를 기준으로 다음과 같이 배정한다
# 1 : 끝자리 0번, 5번
# 2 : 끝자리 1번, 6번
# 3 : 끝자리 2번, 7번
# 4 : 끝자리 3번, 8번
# 5 : 끝자리 4번, 9번

# 입력 예시
# 1234
# 출력 예시
# 5

# 답
# print(int(input()) % 5 + 1)
# -----------------------------------------------------------------------------------------------------
# ‘,’ 로 분리되어 입력되는 정수 3개를 받아 합을 인쇄하시오
# input().split() 메서드의 옵션을 이용한다
# input().split( sep = ‘,’ )는 ‘,’로 구분된 입력을 분리하여 받는다
# input().split( sep = ‘;’ )는 ‘;’로 구분된 입력을 분리하여 받는다
# 입력 받은 , 로 구분된 3개의 정수의 합을 인쇄한다

# 입력 설명
# 한줄에 콤마(,)로 분리되어 정수 3개가 주어진다
# 출력 설명
# 정수 3개의 합을 인쇄한다

# 입력 예시
# 20,  -3, 25
# 출력 예시
# 42

# 답
# a, b, c = map(int, input().split(sep = ','))
# print(a+b+c)
# -----------------------------------------------------------------------------------------------------
# 두 줄에 걸쳐서 입력되는 정수를 받아서 합을 구하시오
# 입력: 첫 줄에는 정수 1개, 두 번째 줄에는 정수 2개가 ‘/’ 로 구분되어 입력된다
# 출력: 세 개의 정수를 받아서 합을 인쇄하라

# 입력 예시
# 20
# -3 / 25
# 출력 예시
# 42

# 답
# a = int(input())
# b, c = map(int, input().split(sep = '/'))
# print(a+b+c)
# -----------------------------------------------------------------------------------------------------
# 몫과 나머지 계산하여 인쇄 다음 코드를 설계하라
# 2개의 정수를 입력 받아 몫과 나머지를 인쇄한다

# 입력 : 2개의 양의 정수를 공백으로 구분하여 한 줄에 입력 받는다
# 출력: 몫과 나머지를 공백으로 구분하여 인쇄한다
# 구현 : map()함수를 이용하여 입력 받고 //와 %연산자를 이용하여 연산한다

# 입력 예시
# 20 3
# 출력 예시
# 6 2

# a, b = map(int, input().split())
# print( a//b, a%b )
# -----------------------------------------------------------------------------------------------------

# 문자열을 반복 인쇄하는 다음 코드를 설계하라
# 문자열 s와 횟수 n을 공백으로 구분하여 한 줄에 입력 받아 n번 s를 반복 인쇄한다

# 입력 : 한 줄에 문자열과 n회를 공백으로 구분하여 입력 받는다. (주의) map 함수 사용이 가능할까?
# 출력 : 문자열을 n회 반복 인쇄한다. 문자열을 반복하는 기능(*)을 사용한다

# 입력 예시
# Hello 3
# 출력 예시
# HelloHelloHello

# 답
# s, n = input().split()
# n = int(n)
# print( s*n )
# -----------------------------------------------------------------------------------------------------
# 가격과 세율을 입력 받아 세금과 합계를 인쇄하라
# 입력 : 가격과 세율을 공백으로 구분하여 입력 받는다.
# 구현 : 세금(tax) = 가격(price) * ( 세율(rate)/100 ), 합계(total) = 가격 + 세금
# 출력 : 세금과 합계를 인쇄한다
# # 코드 작성

# print("tax=", tax)
# print("total=", total)

# 입력 예시
# 1500 12.5
# 출력 예시
# tax= 187.5
# total= 1687.5

# 답
# price, rate = map(float, input().split())
# tax = price * (rate / 100)
# total = price + tax
# print("tax=", tax)
# print("total=", total)
 
# -----------------------------------------------------------------------------------------------------
# 학생 3명의 키가 공백으로 분리된 실수로 한 줄에 입력된다.
# 입력된 정보를 이용하여 다음과 같은 분석 결과를 인쇄하는 코드를 설계하라
# 1. 첫 줄에 3명 키의 평균을 인쇄한다.
# 2. 둘째 줄에 각 학생들의 키와 평균 키의 차이를 공백으로 분리하여 인쇄한다.

# 입력 예시
# 180.4 178.5 160
# 출력 예시
# 172.96666666666667
# 7.433333333333337 5.533333333333331 -12.966666666666669

# 답
# a, b, c = input().split()
# a, b, c = float(a), float(b), float(c)
# s = (a + b + c) / 3
# print(s)
# print(a - s, b - s, c - s)
# -----------------------------------------------------------------------------------------------------
# 리터(l) 단위의 물의 양(w)과 밀리리터(ml) 단위의 물을 담을 병의 용량(b)이 공백으로 분리되어 한 줄에 입력이 된다.
# 단, w와 b는 양의 정수이고 1 리터는 1000 밀리리터이다.
# w의 물을 b 용량의 병에 담을 경우 몇 병이나 담게 되는지를 구하고자 한다.
# 다음 조건에 맞는 코드를 설계하라.
# 1. 병에 물을 가득 담을 경우 몇 병이나 담을 수 있는지를 첫 줄에 인쇄한다.
# 2. 남는 물의 양을 ml 단위로 인쇄한다.

# 입력 예시
# 3 400
# 출력 예시
# 7
# 200

# 답
# w, b = input().split()
# w, b = int(w), int(b)
# print(w * 1000 // b)
# print(w * 1000 % b)
# -----------------------------------------------------------------------------------------------------
# 다음에서 요구하는 코드를 설계하라
# 첫 줄에 데이터의 수 n을 정수로 입력 받는다
# 다음 줄에 공백으로 분리된 n개의 실수(정수도 가능)를 입력 받는다
# 입력 받은 실수 값들의 합과 평균을 구하여 각각 공백으로 분리하여 인쇄하라
# (힌트) map의 결과는 iterator이며 한 번 사용하면 item들이 소진된다
# float의 소수부는 기본적으로 최대 소수부 16자리까지 나올 수 있으니 신경 쓸 필요 없음

# 입력 예시
# 3
# 3.14  5.59  10
# 출력 예시
# 18.73 6.243333333333333

# 답
# n = int(input())
# d = map(float, input().split())
 
# s = sum(d)
# print(s, s/n)
# -----------------------------------------------------------------------------------------------------
# 튜플 t에 경품 목록이 기록되어 있다.
# 받고 싶은 경품 번호를 정수로 입력 받으면 경품을 인쇄하는 코드를 설계하라
# 단, 번호는 1~4번까지 입력이 되며 제일 앞의 camera를 받고 싶으면 1을 TV를 받고 싶으면 2를 입력해야 한다.
# t = ('camera', 'TV', 'computer', 'smart phone')
# # 코드 작성

# 입력 예시
# 1
# 출력 예시
# camera

# 답
# t = ('camera', 'TV', 'computer', 'smart phone')
# print(t[int(input()) - 1])
# -----------------------------------------------------------------------------------------------------

# 학생 이름을 입력 받으면 해당 학생의 몸무게를 인쇄하는 프로그램을 설계하라
# 학생 이름과 몸무게 정보는 다음과 같다.
# kim => 80
# lee => 75
# park => 89.3
# song => 72
# lew => 90

# 입력 예시
# kim
# 출력 예시
# 80

# 답
# d = {'kim' : 80, 'lee' : 75, 'park' : 89.3, 'song' : 72, 'lew' : 90}
# print(d[input()])
# -----------------------------------------------------------------------------------------------------

# 리스트 name에 이름들이 입력되어 있다.
# 변경하고자 하는 이름의 위치 번호(p)와 변경할 이름(n)이 한줄에 ,로 분리되어 입력된다.
# 위치 번호 p는 양의 정수이며 맨 처음 위치는 0을 의미한다.
# 최종적으로 변경된 name의 내용을 인쇄한다.
# 단, 인쇄되는 내용은 출력 예시와 같이 리스트 형태로 인쇄되어야 한다.
# name = ['kim', 'lee', 'park', 'song', 'lew', 'moon']
# # 코드 작성

# 입력 예시
# 0,ko
# 출력 예시
# ['ko', 'lee', 'park', 'song', 'lew', 'moon']

# 답
# name = ['kim', 'lee', 'park', 'song', 'lew', 'moon']
# p, n = input().split(sep = ',')
# name[int(p)] = n
# print(name)
# -----------------------------------------------------------------------------------------------------
# 야구장 입장표 대기줄에 친구를 내 앞에 새치기 시켜 주려 한다
# 줄을 서 있는 사람들의 명단이 list container에 저장되어 있다
# 내 자리 번호(정수)와 친구의 이름(문자열)이 공백으로 구분되어 한 줄에 입력된다
# 단, 자리 번호는 0번 부터가 아닌 1번부터 시작함에 주의해야 한다
# 친구를 n번째(item 번호는 n – 1)에 추가한 list를 인쇄한다
# 다음 템플릿 코드를 사용하여 설계한다
# l = ['kim', 'lee', 'moon', 'lew', 'kang', 'song']

# # 코드 작성

# print(l)

# 입력 예시
# 1  park
# 출력 예시
# ['park', 'kim', 'lee', 'moon', 'lew', 'kang', 'song']

# 답
# l = ['kim', 'lee', 'moon', 'lew', 'kang', 'song']
 
# n, f = input().split()
# n = int(n) - 1
# l.insert(n, f)
 
# print(l)
# -----------------------------------------------------------------------------------------------------
# 과일별 가격이 dict로 구성되어 있다.
# 과일 이름(문자열)과 가격(양의 정수)이 한 줄에 공백으로 분리되어 입력된다.
# 입력 받은 과일 이름을 key 입력된 가격을 value로 하여 dict에 추가하라
# 단, 이미 있는 과일일 경우 입력 받은 가격으로 갱신하라
# 최종적으로 변경된 dict 내용을 출력 예시와 같이 인쇄되어야 한다.
# d = {'apple' : 1000, 'banana'  : 300, 'orange' : 450}
# # 코드 작성
# print(d)

# 입력 예시
# banana 400
# 출력 예시
# {'apple': 1000, 'banana': 400, 'orange': 450}

# 답
# d = {'apple' : 1000, 'banana'  : 300, 'orange' : 450}
# n, p = input().split()
# d[n] = int(p)
# print(d)
# -----------------------------------------------------------------------------------------------------
# 2차원으로 구성된 튜플 t에 값들이 들어 있다.
# 공백으로 분리되어 한줄로 입력되는 행과 열 번호의 행, 열에 위치한 값을 인쇄하는 코드를 설계하라.
# 단, 이 값들은 정수로 입력되며 행 또는 열의 첫번째는 0번 위치로 본다.
# (예1) 아래 튜플에서 0과 0이 입력이 되면 8이 인쇄된다.
# (예2) 아래 튜플에서 1과 2가 입력이 되면 100이 인쇄된다.
# t = ((8,9,10,-34),(80,90,100,-340),(800,900,1000,-3400))
# # 코드 작성

# 입력 예시
# 1 2
# 출력 예시
# 100

# 답
# t = ((8,9,10,-34),(80,90,100,-340),(800,900,1000,-3400))
# r, c = map(int, input().split())
# print(t[r][c])
# -----------------------------------------------------------------------------------------------------
# a와 b의 내용이 서로 교환되도록 다음 코드를 완성하라
# 단, 1줄(문장 하나)의 코드로 swap 기능을 구현해야 한다.
# a = 10
# b = 20
# print(a, b)

# # swap 코드를 1줄로 작성한다

# print(a, b)

# 입력 설명
# 없음
# 출력 설명
# a와 b가 서로 바뀐 값
# 입력 예시
# 없음
# 출력 예시
# 10 20
# 20 10

# 답
# a = 10
# b = 20
# print(a, b)
# a, b = b, a
# print(a, b)
# -----------------------------------------------------------------------------------------------------
# 여러 이름 받아서 처음과 마지막만 이름만 인쇄하라
# 지정되지 않은 수의 이름이 공백으로 분리되어 입력된다
# 입력 받은 이름들 중 첫 번째와 제일 마지막 이름만 인쇄하라
# 다양한 방법이 사용될 수 있다
# indexing 방법과 부분 unpack 방식을 각각 이용하여 설계하여 보자
# 다음 템플릿 코드를 사용하여 설계하라
# # 코드 작성

# print(first, last) 

# 입력 예시
# park  kim  lee  moon  lew  kang  song
# 출력 예시
# park song

# 답
# n = input().split()
 
# first, last = n[0], n[-1]
# #first, *mid, last = n
 
# print(first, last)
# -----------------------------------------------------------------------------------------------------
# 개수를 알 수 없는 정수들이 공백으로 분리되어 입력된다.
# 단, 이 값들은 최소한 4개 이상이다.
# 이들 값 중 맨 앞의 2개와 맨 뒤의 2개는 껍데기를 구성하는 숫자이다.
# 껍데기를 제외한 알멩이들의 합을 인쇄하라

# 입력 예시
# 28 273 28 18 293 20 10 3
# 출력 예시
# 359

# 답
# a, b, *c, d, e = map(int, input().split())
# print(sum(c))
 
# ##x = tuple(map(int, input().split()))
# ##print(sum(x[2:-2]))
# -----------------------------------------------------------------------------------------------------
# 양의 정수 a, b가 공백으로 분리되어 입력된다.
# 단, a는 반드시 b보다 작다.
# 이때, a와 b 사이에 존재하는 정수들의 합을 인쇄하라

# 입력 예시
# 1 11
# 출력 예시
# 54

# 답
# a, b = map(int, input().split())
# print(sum(range(a+1, b)))
# -----------------------------------------------------------------------------------------------------
# 10 이하의 양의 정수 n을 입력 받는다.
# 0부터 시작하는 3의 배수 값들에서 차례대로 n개의 합을 인쇄하라
# 만약 n이 1이면 0, n이 2이면 0+3 = 3, n이 3이면 0+3+6 = 9가 인쇄되어야 한다.

# 입력 예시
# 10
# 출력 예시
# 135

# 답
# n = int(input())
# print(sum(range(0,n*3,3)))
# -----------------------------------------------------------------------------------------------------
# 야구장 입장표 대기줄에 친구를 내 앞에 새치기 시켜 주려 한다
# 다만, 새치기 방지를 위하여 immutable인 tuple container로 줄을 세웠다
# 내 자리 번호(정수)와 친구의 이름(문자열)이 공백으로 구분되어 한 줄에 입력된다
# 단, 자리 번호는 0번 부터가 아닌 1번부터 시작함에 주의해야 한다
# 친구를 n번째(item 번호는 n – 1)에 추가한 tuple을 인쇄한다
# 다음 템플릿 코드를 사용하여 설계한다
# t = ('kim', 'lee', 'moon', 'lew', 'kang', 'song')

# 코드 작성

# print(t)

# 입력 예시
# 1  park
# 출력 예시
# ('park', 'kim', 'lee', 'moon', 'lew', 'kang', 'song')

# 답
# t = ('kim', 'lee', 'moon', 'lew', 'kang', 'song')
 
# n, f = input().split()
# n = int(n) - 1
# l = list(t)
# l.insert(n, f)
# t = tuple(l)
 
# print(t)
# -----------------------------------------------------------------------------------------------------
# n개의 정수가 공백으로 분리되어 한 줄로 입력된다.
# 입력된 숫자들의 합을 인쇄하라.
# 단, 이 숫자들 중 중복된 숫자가 있는 경우 하나만 합계에 반영한다.
# 예를들어 3이 4개가 입력되었다면 3은 한번만 더해지도록 한다.

# 입력 예시
# 1 2 3 3 3 4 5 6 7 7 8 8 9 9 9 10 9 8 7 6
# 출력 예시
# 55

# 답
# print(sum(set(map(int, input().split()))))
# -----------------------------------------------------------------------------------------------------
# 튜플 t에 ID와 이름이 저장되어 있다.
# ID를 입력 받아 해당 ID에 해당하는 이름을 인쇄하라
# 단, ID는 중복될 수 없다
# t = ((1001, 'kim'),(1002,'lee'),(2001,'park'),(2002,'song'),(3001,'moon'),(3002,'lee'))
# # 코드 작성

# 입력 예시
# 1001
# 출력 예시
# kim

# 답
# t = ((1001, 'kim'),(1002,'lee'),(2001,'park'),(2002,'song'),(3001,'moon'),(3002,'lee'))
# print(dict(t)[int(input())])
# -----------------------------------------------------------------------------------------------------
# 5명의 학생이 가지고 있는 예금의 합을 구하려고 한다.
# 학생별 예금 금액 정보는 dict로 구성되어 있다.
# 예금 금액의 합을 구하여 인쇄하는 코드를 설계하라
# d = {'kim' : 34000, 'lee' : 12000, 'park' : 1200, 'lew' : 0, 'song' : 3420}
# 코드 작성

# 입력 예시
# 없음
# 출력 예시
# 50620

# 답
# d = {'kim' : 34000, 'lee' : 12000, 'park' : 1200, 'lew' : 0, 'song' : 3420}
# print(sum(d.values()))
# -----------------------------------------------------------------------------------------------------
# 첫째줄에는 n개의 정수가 공백으로 분리되어 한 줄로 입력된다.
# 두번째 줄에는 정수 x가 입력된다.
# 입력된 x가 첫줄에 입력된 정수들 가운데 있는 숫자일 경우 True, 그렇지 않으면 False를 인쇄하라

# 입력 예시
# 1 5 90 -45 87
# -45
# 출력 예시
# True

# 답
# n = map(int, input().split())
# print(int(input()) in n)
# -----------------------------------------------------------------------------------------------------
# 첫째줄에는 n개의 정수가 공백으로 분리되어 한 줄로 입력된다. 
# 두번째 줄에는 정수 x가 입력된다. 
# 입력된 x가 첫줄에 입력된 정수들 가운데 있는 숫자일 경우 GOOD, 그렇지 않으면 BAD를 인쇄하라 

# 입력 예시
# 1 5 90 -45 87
# -45
# 출력 예시
# GOOD

# 답
# r = {True : 'GOOD', False : 'BAD'}
# n = map(int, input().split())
# print(r[int(input()) in n])
# -----------------------------------------------------------------------------------------------------
# 공백으로 분리된 이름과 ID를 입력받는다.
# 이름과 ID 튜플을 Key로 성적을 Value로 구성한 dict를 참조하여 해당 학생의 성적을 인쇄하라
# d = {('kim', 1001):'A',('lee', 1002):'B',('kim', 2001):'B',('lew', 2002):'F'}
# # 코드 작성

# 입력 예시
# kim 1001
# 출력 예시
# A

# 답
# d = {('kim', 1001):'A',('lee', 1002):'B',('kim', 2001):'B',('lew', 2002):'F'}
# s, n = input().split()
# print(d[(s, int(n))])
# -----------------------------------------------------------------------------------------------------
# 10진수 값을 2진수의 값으로 인쇄하는 코드를 구현하라10진수 값을 2진수의 값으로 인쇄하는 코드를 구현하라
# 10진수 값 하나가 입력되면 2진수 값으로 인쇄한다. (예)10 => 0b1010

# 입력 예시
# 10
# 출력 예시
# 0b1010

# 답
# v = int(input())
# print(bin(v))
# -----------------------------------------------------------------------------------------------------
# 16진수 정수 하나가 입력된다.
# 입력된 값의 10진수 변환 값을 인쇄하는 코드를 작성하라
# 예로서 10 이 입력되면 16, F가 입력되면 15가 인쇄되어야 한다.
# (힌트) int 함수는 입력되는 정수 문자열의 진법을 지정할 수 있다.

# 입력 예시
# F
# 출력 예시
# 15

# 답
# print(int(input(), base = 16))
# -----------------------------------------------------------------------------------------------------
# 2진수 정수 하나가 입력이 된다.
# 이 값의 16진수 변환값을 인쇄하는 코드를 작성하라
# (힌트) hex 함수는 입력된 10진수 값을 0x를 붙인 16진수 문자열로 만들어 준다

# 입력 예시
# 1101
# 출력 예시
# 0xd

# 답
# print(hex(int(input(), base = 2)))
# -----------------------------------------------------------------------------------------------------
# 대문자 하나를 입력받으면 이를 소문자로 변환하여 인쇄하는 코드를 설계하라
# 단, str class의 lower 메서드는 사용하지 않는다.
# (힌트1) 대문자 'A'의 unicode 값은 65이고 소문자 'a'의 unicode 값은 97이다
# (힌트2) 영문자는 'A' 부터 'Z'까지 번호가 연속되어 부여되어 있다.

# 입력 예시
# A
# 출력 예시
# a

# 답
# print(chr(ord(input()) + ord('a') - ord('A')))
# -----------------------------------------------------------------------------------------------------
# 소문자 하나를 입력받으면 이를 대문자로 변환하여 인쇄하는 코드를 설계하라
# 단, str class의 upper 메서드는 사용하지 않는다.
# (힌트1) 대문자 'A'의 unicode 값은 65이고 소문자 'a'의 unicode 값은 97이다
# (힌트2) 영문자는 'a' 부터 'z'까지 번호가 연속되어 부여되어 있다.

# 입력 예시
# a
# 출력 예시
# A

# 답
# print(chr(ord(input()) - (ord('a') - ord('A'))))
# -----------------------------------------------------------------------------------------------------
# 공백으로 분리된 정수들의 절대값들을 구하는 코드를 구현하라
# 단, 입력되는 정수의 개수는 정해지지 않았다

# 입력 예시
# 20  -35  290  0  -374
# 출력 예시
# 20 35 290 0 374

# 답
# x = map(int, input().split())
# print(*map(abs, x))
 
# -----------------------------------------------------------------------------------------------------
# 학생들의 키가 공백으로 분리된 실수로 입력된다
# 가장 큰 키와 가장 작은 키를 인쇄하라 단, 입력되는 값들의 개수는 정해지지 않았다
# (주의) map의 결과는 iterator 타입이다

# 입력 예시
# 179.8  182.5  170.1  190.4
# 출력 예시
# 190.4 170.1

# 답
# t = tuple(map(float, input().split()))
# print(max(t), min(t))
# -----------------------------------------------------------------------------------------------------
# 튜플 t에 수식 문자열들이 저장되어 있다.
# 이들 수식들을 모두 계산한 결과 값들의 합을 인쇄하라
# a = 10
# b = 3
# t = ('a + b', 'a - b', 'a * b', 'a // b', 'a % b', 'a ** 2')
# # 코드 작성

# 입력 예시
# 없음
# 출력 예시
# 154

# 답
# a = 10
# b = 3
# t = ('a + b', 'a - b', 'a * b', 'a // b', 'a % b', 'a ** 2')
 
# print(sum(map(eval, t)))
# -----------------------------------------------------------------------------------------------------
# 다음 프로그램을 설계하라

# [조건]
# 두 개의 정수와 사칙연산자 순서대로 입력 받는다 => 연산자가 후위에 입력, 아래 예시 참조
# 입력 받은 정수와 연산자를 이용하여 연산한 결과를 인쇄한다 => 아래 예시 참조
# 사칙연산자는 +, -, *, // 중 한 개가 입력된다

# [힌트] 
# ‘5 2 +’가 입력된 경우 input().split() 의 결과는 ‘5’, ‘2’, ‘+’ 이다
# 따라서 순서 변경하여 ‘5+2’가 되도록 문자열을 합치고 eval에 전달하면 된다
# (힌트) 문자열의 덧셈은 문자열 연결을 의미한다  (예) ‘ab’ + ‘cd’ => ‘abcd’ 

# 입력 예시
# 5 2 +
# 출력 예시
# 7

# 답
# a, b, op = input().split()
# print(eval(a + op + b))
# -----------------------------------------------------------------------------------------------------
# 3줄의 코드를 문장으로 입력 받아 실행하는 인터프리터를 설계하라
# 입력 창에서 코드는 3줄로만 작성한다
# input으로 3 줄의 문장을 3줄에 걸쳐서 입력 받는다
# exec를 이용하여 외부에서 입력되는 3줄의 문장을 실행한다

# 입력 예시
# a = 10
# b = 20
# print(max(a,b))
# 출력 예시
# 20

# 답
# #[1]
 
# exec(input())
# exec(input())
# exec(input())
 
# #[2] 탐구 문제
 
# ##a = input() + ";" + input() + ";" + input()
# ##exec(a)
# -----------------------------------------------------------------------------------------------------
# A 통신사는 문자 메시지 이용 요금을 10글자당 100원을 부여하기로 했다.
# 단, 10글자 미만이면 무료이고 10글자가 넘으면 10글자당 100원이 과금된다.
# 공백이나 특수기호 등도 글자수에 모두 포함한다.
# 다만, 입력 글자수에서 과금할 10글자 단위 글자수들 이하의 남는 글자수들은 요금을 부과하지 않는다.
# 예를 들어 입력이 12글자일 경우 10글자 단위로 1이므로 100원을 부과하되
# 10글자 미만으로 남는 2글자는 요금을 부과하지 않아서 총 금액은 100원이 된다.
# 만약 입력 글자수가 43글자일 경우 40글자에 대한 요금은 부과하되 10글자 단위 미만인 3글자에 대하여는 요금을 부과하지 않는다.
# 따라서 43글자의 경우 40글자에 대한 400원만 부과하면 된다.
# 문자 메시지로 발송할 문자열 하나를 입력 받아서 발송 요금이 얼마인지 인쇄하는 프로그램을 설계하라

# 입력 예시
# Python is a programming language that lets you work quickly and integrate systems more effectively.
# 출력 예시
# 900

# 답
# print(len(input()) // 10 * 100)
# -----------------------------------------------------------------------------------------------------
# 양의 정수 하나가 입력되면 자리수를 인쇄하는 코드를 설계하라
# 예를 들어 123이 입력되면 3이 인쇄되고 24가 입력되면 2가 인쇄되어야 한다.

# 입력 예시
# 1234
# 출력 예시
# 4

# 답
# print(len(input()))
# -----------------------------------------------------------------------------------------------------
# n개의 이름이 공백으로 분리되어 한 줄에 입력된다.
# 이름 순으로 회의장 좌석을 배치하고자 한다.
# 즉, 알파벳(사전식) 기준으로 비교하여 가장 빠른 이름이 맨 앞자리에 앉아야 한다.
# 이들 이름 중 가장 앞자리와 가장 뒷자리에 앉을 사람의 이름을 공백으로 분리하여 한 줄에 인쇄하라

# 입력 예시
# kim lee park song moon ko lew lee
# 출력 예시
# kim song

# 답
# x = input().split()
# print(min(x), max(x))
# -----------------------------------------------------------------------------------------------------
# n명의 학생들의 키 정보가 실수값으로 공백으로 분리되어 한 줄에 입력된다.
# 이 키 값들을 내림차순으로 정렬하여 결과를 한줄에 공백으로 분리하여 인쇄하라
# 또한 가장 큰 키와 가장 작은키를 공백으로 분리하여 한줄에 인쇄하라
# (참고) 정렬된 데이터에서 가장 큰값과 가장 작은값을 찾으려면 어떤 방법이 효율적일까?

# 입력 예시
# 172.8 190 188.2 169.9 201 172.7
# 출력 예시
# 201.0 190.0 188.2 172.8 172.7 169.9
# 201.0 169.9

# 답
# x = map(float, input().split())
# y = sorted(x, reverse = True)
# print(*y)
# print(y[0], y[-1])
# -----------------------------------------------------------------------------------------------------
# n개의 정수가 공백으로 분리되어 입력이 된다.
# 이 값들은 음수, 양수, 0이 모두 가능하며 값이 중복될 수도 있다.
# 이때 가장 최초에 입력된 최소값의 뒤에 입력된 숫자들 중 최초로 입력된 최대값이 몇 번째 뒤에 있는지를 인쇄하라.
# 즉, 3 1 2 4 1 5 4 2 5 5 가 입력되었다면 최소값은 1, 최대값은 5이므로 처음 1 이후에 나온 값들 중 최초의 5는 최초의 1의 4번째 뒤의 숫자이다.
# 따라서 4가 인쇄되어야 한다. 단, 최초로 입력된 최소값 뒤에는 반드시 최대값이 존재한다. 즉, 2 1 1 1 형식이나 3 1 2 2  와 같은 형식의 입력은 있을 수 없다.

# 입력 예시
# 3 1 2 4 1 5 4 2 5 5
# 출력 예시
# 4

# 답
# x = tuple(map(int, input().split()))
# p = x.index(min(x))
# m = x.index(max(x), p+1)
# print(m - p)
# -----------------------------------------------------------------------------------------------------
# 첫 줄에 문장(s) 하나를 입력받는다.
# 둘째 줄에는 단어(w) 하나를 입력 받는다.
# 입력 받은 문장(s)에서 입력 받은 단어(w)가 몇번 등장 하는지 횟수를 인쇄하라

# 입력 예시
# hello python hello willtek hello korea hello everyone
# hello
# 출력 예시
# 4

# '''
# s = input()
# w = input()
# print(s.count(w))
# '''
 
# l = input().split()
# w = input()
# print(l.count(w))
# -----------------------------------------------------------------------------------------------------
# 5개 정수를 튜플로 입력 받는 다음 코드를 설계하라
# 정수는 공백으로 분리되어 5개가 입력된다 
# (참고) split()은 list 타입을 반환한다
# 5개 정수를 튜플로 받아서 내용과 3번 item(4번째 입력된 값)을 인쇄하라
# (힌트) 입력을 int로 만든 후 다시 tuple()를 이용한다

# 입력 예시
# 30 50 -100 20 90
# 출력 예시
# (30, 50, -100, 20, 90)
# 20

# 답
# t = tuple(map(int, input().split()))
# print(t, t[3], sep = '\n')
 
# -----------------------------------------------------------------------------------------------------
# n개 정수를 리스트로 입력 받는 다음 코드를 설계하라
# 공백으로 분리된 n개 정수를 리스트에 저장 후 최대값을 구하여 인쇄한다
# 또한, 계산한 최대값을 리스트에 추가하여 n+1개짜리 리스트로 만든 후 내용을 인쇄한다
# (힌트) list 요소 중 최대값을 max()로 찾고 그 값을 list에 추가(append 메서드) 한다

# 입력 예시
# 30 500 -100 20 90
# 출력 예시
# 500
# [30, 500, -100, 20, 90, 500]

# 답
# l = list(map(int, input().split()))
# m = max(l)
# l.append(m)
# print(m, l, sep = '\n')
# -----------------------------------------------------------------------------------------------------
# n명 이름을 입력 받아 중복을 제거하고 인원수를 인쇄하라
# 어떤 container를 사용하든지 상관없으나 중복된 이름은 제거 되어야 한다
# 입력되는 이름의 개수는 정해지지 않으며 공백으로 분리되어 입력된다

# 입력 예시
# kim lee kang kim song 
# 출력 예시
# 4 

# 답
# s = set(input().split())
# print(len(s))
# -----------------------------------------------------------------------------------------------------
# n개의 정수를 받아 오름차순과 내림차순으로 정렬 후 인쇄하라
# 사용 container는 무관하나 최종 인쇄는 list 형식이어야 한다  출력 예시 참조 
# 입력되는 정수의 개수는 정해지지 않으며 공백으로 분리되어 입력된다
# (힌트) sorted()는 원본을 변경하지 않고 정렬된 복사본을 list 타입으로 반환한다

# 입력 예시
# -10 20 -40 90 200

# 출력 예시
# [-40, -10, 20, 90, 200]
# [200, 90, 20, -10, -40]

# 답
# t = tuple(map(int, input().split()))
# print(sorted(t), sorted(t, reverse = True), sep = '\n')
 
# -----------------------------------------------------------------------------------------------------
# 과일 이름을 입력하면 가격을 알려주는 코드를 구현하라
# 과일은 5종류(apple, banana, mango, pineapple, orange)만 취급한다
# 과일 종류는 tuple f에 저장되어 있고 가격은 tuple p에 저장되어 있다
# 키보드로 과일 이름을 입력 받되 위 5개 종류 이외 입력은 들어 오지 않는 것으로 한다
# 다음 템플릿 코드를 사용하라
# f = ('apple', 'banana', 'mango', 'pineapple', 'orange')
# p = (1000, 800, 2000, 5200, 400)

# # 코드 작성

# 입력 예시
# banana
# 출력 예시
# 800

# 답
# f = ('apple', 'banana', 'mango', 'pineapple', 'orange')
# p = (1000, 800, 2000, 5200, 400)
 
# print(p[f.index(input())])
# -----------------------------------------------------------------------------------------------------
# dict를 이용한 과일 가격 알려주세요
# 과일이름과 가격으로 구성된 dict를 활용하여 입력된 과일의 가격을 인쇄하라
# dict는 key와 value로 쌍을 이루어 관리하는 경우 유리하다
# 다음 템플릿 코드를 사용하라
# d = {'apple':1000, 'banana':800, 'mango':2000, 'pineapple':5200, 'orange':400}

# # 코드 작성

# 입력 예시
# pineapple
# 출력 예시
# 5200

# 답
# d = {'apple':1000, 'banana':800, 'mango':2000, 'pineapple':5200, 'orange':400}
# print(d[input()
# -----------------------------------------------------------------------------------------------------
# 첫째줄에 우리반 학생들의 키가 공백으로 분리되어 실수로 입력된다.
# 둘째줄에 내 키가 실수로 입력된다.
# 물론 입력된 키 목록에는 내 키 값도 포함되어 있다.
# 우리반에서 나보다 키가 큰 학생들의 수를 인쇄하라.
# 단, 키가 같으면 큰 학생 수에 포함하지 않아야 한다.

# 입력 예시
# 120.1 180.5 178 190.5 178 178 180.5 170 180.5
# 178
# 출력 예시
# 4

# 답
# x = map(float, input().split())
# m = float(input())
# x = sorted(x)
# print(len(x) - x.index(m) - x.count(m))
 
# ### 최적화된 코드
# ##x = map(float, input().split())
# ##m = float(input())
# ##x = sorted(x, reverse = True)
# ##print(x.index(m))
# -----------------------------------------------------------------------------------------------------
# map을 사용하여 실수 값들의 일괄적 정수화(가까운 정수값으로)하기
# Tuple에 저장된 실수 값들을 가까운 정수값으로 변환한 정수 값을 인쇄하라(round 사용)

# * 다음은 python 템플릿으로 사용해도 무방함.

# f = (3.14, -5.625, 100.4, 25.8)

# # 코드를 작성하시오

# 출력 예시
# 3 -6 100 26

# 답
# f = (3.14, -5.625, 100.4, 25.8)
# print(*map(round, f))
 
# -----------------------------------------------------------------------------------------------------
# pow 함수를 이용하여 ab 값들을 구하여 인쇄하라

# [구현 설명]
# 전달할 인자가 2개인 함수를 map을 이용하여 일괄 실행하기
# a 값들은 튜플 v에 지수 b 값은 튜플 e에 저장되어 있다
# 전달할 인자가 여러 개일 경우는 map(함수, 인자1, 인자2, … 인자n) 형식을 취한다
# 단, 이들 인자는 반드시 iterable 이어야 하며 아이템의 개수는 동일해야 한다
# * 다음은 python 템플릿으로 사용해도 무방함.

# v = (10, 4, 2, -10)
# e = (2, 3, 4, 2)

# # 코드를 작성하시오

# 출력 예시
# 100 64 16 100

# 답
# v = (10, 4, 2, -10)
# e = (2,  3, 4,  2)
# print(*map(pow, v, e))
 
# # 아래의 경우 아이템수가 적은 e의 개수에 맞춰 동작한다
 
# # v = (10, 4, 2, -10, 20, 30)
# # e = (2,  3, 4,  2)
# # print(*map(pow, v, e))
# -----------------------------------------------------------------------------------------------------
# divmod 함수의 map 함수 사용하는 다음 코드를 구현하라
# [조건]
# divmod(a,b) 함수는 a // b와 a % b를 튜플 쌍으로 리턴 한다
# 리턴이 컨테이너 타입인 함수에 대한 map을 사용하여 구현한다
# 튜플 a와 b에 저장된 값들을 divmod 함수로 몫, 나머지를 구한 후 이를 인쇄하라
# 인쇄는 인쇄 예와 같이 튜플 쌍으로 인쇄되면 된다

# * 다음은 python 템플릿으로 사용해도 무방함. 
# a = (10, 5, 20, 35)
# b = (3, 3, 6, 5)
# # 코드를 작성하시오

# 입력 예시
# 없음
# 출력 예시
# (3, 1) (1, 2) (3, 2) (7, 0)

# 답
# a = (10, 5, 20, 35)
# b = (3, 3, 6, 5)
# print(*map(divmod, a, b))
# -----------------------------------------------------------------------------------------------------
# 이미지의 색상별 데이터를 묶어서 24bpp RGB 이미지 만들기

# [조건]
# red, green, blue 픽셀 값이 각각의 튜플 r, g, b에 저장되어 있다
# 이 세 개의 튜플에서 같은 인덱스의 값들을 모아 튜플로 (r[0], g[0], b[0])로 구성한다
# 최종적으로 모아진 결과는 list로 만들고 이 내용들을 인쇄한다. 인쇄 결과를 참조한다
# 즉, 최종 결과 list가 img 라면 이 img는 [(r[0],g[0],b[0]), (r[1],g[1],b[1]), …] 형식이다
# * 다음은 python 템플릿으로 사용해도 무방함.

# r = (52, 255, 39, 132)
# g = (19, 63, 227, 197)
# b = (0, 68, 255, 187)

# # 코드를 작성하시오

# print(img)

# 출력 예시
# [(52, 19, 0), (255, 63, 68), (39, 227, 255), (132, 197, 187)]

# 답
# r = (52, 255, 39, 132)
# g = (19, 63, 227, 197)
# b = (0, 68, 255, 187)
 
# img = list(zip(r, g, b,))
 
# print(img)
# -----------------------------------------------------------------------------------------------------
# 중복되지 않는 과일 이름이 튜플 f에 저장되어있고 가격은 튜플 p에 저장되어 있다
# 과일 이름을 key, 가격을 value로 하는 dict 타입의 tag를 생성한다
# 생성한 dict 타입 tag를 인쇄한다 => 인쇄 결과 참조, 템플릿 코드 사용
# 그리고 키보드로 과일 이름을 입력 받아서 해당 과일의 가격을 인쇄하라
# 단, 중복된 과일은 없으며 f에 있는 과일 이외 다른 과일 이름의 입력은 없는 것으로 한다
# * 아래 템플릿 코드를 사용하여 작성하라

# f = ('apple', 'orange', 'banana', 'mango')
# p = (100, 80, 120, 90)

# # 코드 작성

# print(tag)
# print(price)

# 입력 예시
# orange
# 출력 예시
# {'apple': 100, 'orange': 80, 'banana': 120, 'mango': 90}
# 80

# 답
# f = ('apple', 'orange', 'banana', 'mango')
# p = (100, 80, 120, 90)
 
# tag = dict(zip(f, p))
 
# n = input()
# price = tag[n]
 
# print(tag)
# print(price)
 
# -----------------------------------------------------------------------------------------------------
# 배열 행과 열 바꾸기

# [조건]
# 다음과 같이 2차원 튜플 m이 있다. 이 튜플의 행과 열을 바꾼 튜플 t를 생성하라
# 만약 3*4 배열이면 4*3 배열이 된다. 인쇄 결과를 참고한다
# 반드시 결과가 저장된 컨테이너 t의 타입은 튜플이어야 한다
# * 다음은 python 템플릿으로 사용해도 무방함.

# m = ((1,2,3,4),(5,6,7,8),(9,10,11,12))

# # 코드를 작성하시오

# print(type(t), t)

# 출력 예시
# <class 'tuple'> ((1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12))

# 답
# m = ((1,2,3,4),(5,6,7,8),(9,10,11,12))
# t = tuple(zip(m[0], m[1], m[2]))
 
# print(type(t), t)
# -----------------------------------------------------------------------------------------------------
# 다음과 같이 2차원 튜플 m이 있다. 이 튜플의 행과 열을 바꾼 튜플 t를 생성하라
# 코드를 다음과 같이 설계하였을 때 3*4 배열이 아닌 4*5 배열이 입력되면?

# m = ((1,2,3,4,5),(6,7,8,9,10),(11,12,13,14,15),(16,17,18,19,20))
# t = tuple(zip(m[0], m[1], m[2]))
# print(type(t), t)

# 이러한 문제를 해결하기 위하여 코드를 어떻게 설계하는 것이 좋을까?
# 반드시 결과가 저장된 container t의 타입은 튜플이어야 한다


# m = ((1,2,3,4,5),(6,7,8,9,10),(11,12,13,14,15),(16,17,18,19,20))

# t = # 코드 작성

# print(type(t), t)

# 입력 예시
# 없음
# 출력 예시
# <class 'tuple'> ((1, 6, 11, 16), (2, 7, 12, 17), (3, 8, 13, 18), (4, 9, 14, 19), (5, 10, 15, 20))

# 답
# m = ((1,2,3,4,5),(6,7,8,9,10),(11,12,13,14,15),(16,17,18,19,20))
# t = tuple(zip(*m))
 
# print(type(t), t)
# -----------------------------------------------------------------------------------------------------
# 과일 품목별 일련번호 부여하기

# 튜플 f에 있는 과일들을 1번부터 차례대로 보기와 같이 인쇄되도록 번호를 부여하라
# zip과 range를 이용하는 방법과 enumerate를 이용하는 방법이 가능하다

# 단, 결과는 dict로 생성되어야 한다(출력 예시 참조)

# * 다음은 python 템플릿으로 사용해도 무방함.

# f = ('apple', 'orange', 'banana', 'mango')

# tag = # 코드를 작성하시오

# print(tag)

# 출력 예시
# {1: 'apple', 2: 'orange', 3: 'banana', 4: 'mango'}

# 답
# f = ('apple', 'orange', 'banana', 'mango')
# tag = dict(enumerate(f, 1))
# print(tag)
# -----------------------------------------------------------------------------------------------------
# n개의 자동차 이름이 공백으로 분리되어 첫 줄에 입력된다.
# 다음줄에 해당 자동차의 판매가격이 정수로 공백으로 분리되어 입력된다.
# 세번째줄에 자동차 이름이 입력되면 해당 자동차의 판매가격을 인쇄하는 코드를 설계하라

# 입력 예시
# K7 morning sorento carnival pride
# 4500 1600 3200 4100 2400
# sorento
# 출력 예시
# 3200

# 답
# print(dict(zip(input().split(), input().split()))[input()])
# -----------------------------------------------------------------------------------------------------
# 5명 학생의 3과목 성적이 튜플 t에 저장되어 있다.
# 아래 조건에 맞는 집계 프로그램을 설계하라
# 1. 각 학생의 3과목 성적 합계를 구하되 최종 합계에 5점을 가산한다.
# 2. 최종 합계 점수가 가장 적은 점수와 가장 큰 점수를 공백으로 분리하여 한 줄에 인쇄한다.
# t = ((34,70,92),(90,95,100),(55,66,77),(88,66,92),(0,90,88))
# # 코드 작성

# 입력 예시
# 없음
# 출력 예시
# 183 290

# 답
# ##t = ((34,70,92),(90,95,100),(55,66,77),(88,66,92),(0,90,88))
# ##y = tuple(map(sum, t, (5,) * len(t)))
# ##print(min(y), max(y))
 
# t = ((34,70,92),(90,95,100),(55,66,77),(88,66,92),(0,90,88))
# x = sorted(map(sum, t, (5,) * len(t)))
# print(x[0], x[-1])
 
# ##t = ((34,70,92),(90,95,100),(55,66,77),(88,66,92),(0,90,88))
# ##x = tuple(map(sum, t))
# ##print(min(x) + 5, max(x) + 5)
 
# ##t = ((34,70,92),(90,95,100),(55,66,77),(88,66,92),(0,90,88))
# ##x = sorted(map(sum, t))
# ##print(x[0] + 5, x[-1] + 5)
# -----------------------------------------------------------------------------------------------------
# 정수(n)을 입력 받아서 n개의 0으로 초기화된 리스트를 생성하여 변수 x에 저장하라

# x = # 코드 작성
# print(x)

# 입력 예시
# 3
# 출력 예시
# [0, 0, 0]

# 답
# x = [0] * int(input())
# print(x)
# -----------------------------------------------------------------------------------------------------
# 24bpp RGB 이미지 데이터의 색상별 값을 추출하여 list에 저장한다24bpp RGB 이미지 데이터의 색상별 값을 추출하여 list에 저장
# 이미지는 다음과 같은 형식으로 (파일 대신) tuple에 저장되어 있다
# image = (0x10, 0x13, 0x25, 0x10, 0x13, 0x25, …)
# 데이터는 한 바이트를 단위로 R, G, B 순서로 반복적으로 나오며 데이터 총 수는 3의 배수이다
# 단, Image tuple의 데이터 수는 달라 질 수 있는 것으로 고려하여 코드를 설계하여야 한다
# 이 tuple에서 R,G,B 값들을 각각 분리 후 r, g, b container(종류 무관)에 저장한다
# 각 색상들의 평균 값을 가까운 정수(round)로 변환한 값을 구하여 각각 ar, ag, ab에 저장한다
# 최종적으로 계산한 각 색상의 평균 값을 16진수로 인쇄한다
# 주어진 템플릿 코드를 활용하여 나머지 코드를 작성한다
# image = (0x1D, 0x13, 0x25, 0x13, 0x27, 0x45, 0x08, 0xAB, 0x3F)

# # 코드 작성

# print("0x%x 0x%x 0x%x" % (ar, ag, ab)) 

# 출력 예시
# 0x13 0x4c 0x38

# 답
# image = (0x1D, 0x13, 0x25, 0x13, 0x27, 0x45, 0x08, 0xAB, 0x3F)
# r, g, b = image[0::3], image[1::3], image[2::3]
# ar, ag, ab = map(round, (sum(r)/len(r), sum(g)/len(g), sum(b)/len(b)))
 
# print("0x%x 0x%x 0x%x" % (ar, ag, ab))
# -----------------------------------------------------------------------------------------------------
# 생년월일 정보가 YYMMDD 형식의 6자리로 입력이 된다.
# 입력받은 날짜 생년월일 정보를 YY-MM-DD 형식으로 인쇄되도록 코드를 설계하라

# 입력 예시
# 200102
# 출력 예시
# 20-01-02

# 답
# x = input()
# print(x[:2] + '-' + x[2:4] + '-' + x[4:])
# -----------------------------------------------------------------------------------------------------
# 문자열 하나를 입력받아서 순서를 뒤집어 인쇄하는 코드를 설계하라

# 입력 예시
# hello
# 출력 예시
# olleh

# 답
# print(input()[::-1])
# -----------------------------------------------------------------------------------------------------
# 첫줄에 문자열(s) 하나가 입력이 된다.
# 두번째 줄에 s에서 변경할 대상  단어(o)와 바꿀 단어(n)가 공백으로 분리되어 입력이 된다.
# s에서 단어 o를 새로운 단어 n으로 변경한 문자열을 인쇄하는 코드를 설계하라
# 단, o와 n은 문자수가 다를 수 있으며 문자열 s에는 바꿀 대상 단어 o는 딱 하나만 존재한다.

# 입력 예시
# I don't dislike python.
# dislike like
# 출력 예시
# I don't like python.

# 답
# '''
# l = input().split()
# o, n = input().split()
# p = l.index(o)
# l[p] = n
# print(*l)
# '''
 
# s = input()
# o, n = input().split()
# p = s.index(o)
# print(s[:p]+n+s[p+len(o):])
# -----------------------------------------------------------------------------------------------------
# n개의 이름이 문자열로 ,로 분리되어 한줄에 입력된다.
# 입력 받은 이름들의 순서를 뒤집어서 -로 연결하여 한줄로 인쇄하라

# 입력 예시
# kim,lee,moon,lew,kim,kang,song,min
# 출력 예시
# min-song-kang-kim-lew-moon-lee-kim

# 답
# x = input().split(sep=',')
# x.reverse()
 
# print(*x, sep = '-')
# -----------------------------------------------------------------------------------------------------
# 다음 조건에 맞는 함수를 설계하라
# 함수 이름은 string_repeat로 한다
# 문자열 s와 정수 n을 parameter로 받는다
# 문자열 s를 n번 반복하여 생성한 문자열을 return 한다
# (주의) 함수 실행 결과를 절대 함수 안에서 인쇄하면 안됨  반드시 결과를 리턴해야함
# 설계한 함수의 동작 검증은 반드시 주어진 템플릿을 이용해야 한다
# 다음 템플릿을 이용하여 코드를 설계하라

# def string_repeat(s, n) :

#     # 코드 작성

#     return x

# y = string_repeat('kim', 2)
# print(y)
# print(string_repeat('hello', 3))

# 입력 예시
# 없음
# 출력 예시
# kimkim
# hellohellohello

# 답
# def string_repeat(s, n) :
#     x = s * n
#     return x
 
# y = string_repeat('kim', 2)
# print(y)
# print(string_repeat('hello', 3))
# -----------------------------------------------------------------------------------------------------
# 정수값인 사번(id)를 넣으면 팀 번호를 리턴하는 함수 check_team 함수를 설계하라
# 단, 팀 번호는 사번 끝자리 값으로 정한다.
# 아래 템플릿 코드를 사용하되 주어진 코드는 변형하면 안됨
# def check_team(id) :
#     # 코드 작성

# n = int(input())
# print(check_team(n))

# 입력 예시
# 1234567
# 출력 예시
# 7

# 답
# def check_team(id) :
#     return id % 10
 
# n = int(input())
# print(check_team(n))
# -----------------------------------------------------------------------------------------------------
# 첫째줄에 n개의 정수가 공백으로 분리되어 입력된다.
# 둘째줄에 찾을 보석에 해당하는 정수 x가 입력된다. 
# 이들 숫자중에서 보석에 해당하는 값의 개수를 구하고자 한다.
# 이를 위하여 함수 find_gem을 설계하라

# find_gem 함수는 다음과 같이 2개의 parameter를 갖는다.
#  - box: n개의 정수를 저장하고 있는 map 타입
#  - gem: 보석으로 인정되는 정수 값
#  - 리턴 : 전달받은 box에 들어 있는 gem과 같은 수의 개수

# 아래 템플릿 코드를 사용하되 주어진 코드는 변경하면 안됨
# def find_gem(box, gem) :
#     # 코드 작성

# n = map(int, input().split())
# x = int(input())
# print(find_gem(n, x))

# 입력 예시
# 1 3 56 89 23 40 23 45 80 40 9 1 3
# 3
# 출력 예시
# 2

# 답
# def find_gem(box, gem) :
#     return tuple(box).count(gem)
 
# n = map(int, input().split())
# x = int(input())
# print(find_gem(n, x))
# -----------------------------------------------------------------------------------------------------
# n명의 학생 성적을 전달 받아서 평균과 1등의 성적을 리턴하는 함수를 설계하라
# 입력되는 성적은 iterable 타입이며 리턴은 평균과 1등 성적을 튜플로 반환해야 한다.
# 단, 평균은 소수부 둘째자리에서 round 처리한다.
# 아래 템플릿 코드를 사용하되 주어진 코드는 수정하면 안된다.
# def score(x) :
#     # 코드 작성
    
# n = map(int, input().split())
# print(score(n))

# 입력 예시
# 37 50 90 72 23 80 99 100 88 77 66
# 출력 예시
# (71.09, 100)

# 답
# def score(x) :
#     x = tuple(x)
#     return round(sum(x)/len(x), 2), max(x)
 
# n = map(int, input().split())
# print(score(n))
# -----------------------------------------------------------------------------------------------------
# clean 함수는 문자열을 입력 받으면 ()로 감싸서 쓰리기통(전역변수로 생성된 list 타입의 bin)에 추가한다.
# 이러한 동작을 수행하는 clean 함수를 설계하라.
# 아래 템플릿 코드를 사용하되 주어진 코드는 수정하면 안됨
# def clean(x) :
#     # 코드 작성

# bin = []
# for y in input().split() :
#     clean(y)
#     print(bin)

# 입력 예시
# cup dish can toy radio pen
# 출력 예시
# ['(cup)']
# ['(cup)', '(dish)']
# ['(cup)', '(dish)', '(can)']
# ['(cup)', '(dish)', '(can)', '(toy)']
# ['(cup)', '(dish)', '(can)', '(toy)', '(radio)']
# ['(cup)', '(dish)', '(can)', '(toy)', '(radio)', '(pen)']


# def clean(x) :
#     bin.append('('+x+')')
 
# bin = []
 
# for y in input().split() :
#     clean(y)
#     print(bin)
# -----------------------------------------------------------------------------------------------------
# 함수가 호출될 때마다 입력 받은 값의 합을 계속 누적합계를 구하여 결과 값을 리턴하는 함수를 구하라
# 함수 이름은 func로 하며 func(1), func(3), func(10) 순서로 호출이 되었다면
# 리턴 값은 처음에는 1, 다음에는 1+3 즉, 4, 다음에는 4+10 즉, 14가 되어야 한다.
# 주어진 코드를 사용하되 기존 코드는 수정하면 안되며 필요시 전역변수 등은 자유롭게 추가할 수 있다.
# def func(n) :
#     # 코드 작성

# # 아래 부분은 절대 수정하지 말 것
# x = map(int, input().split())
# y = map(func, x)
# print(*y)

# 입력 예시
# 1 2 3 4 10
# 출력 예시
# 1 3 6 10 20

# 답
# def func(n) :
#     global s
#     s += n
#     return s
 
# s = 0
# x = map(int, input().split())
# y = map(func, x)
# print(*y)
# -----------------------------------------------------------------------------------------------------
# 이름, 키, 몸무게가 한줄에 공백으로 분리되어 입력된다.
# 이 신상 정보를 인쇄하기 위하여 print_profile 함수를 이용하고자 한다.
# 주어진 print_profile 함수를 이용하여 신상 정보를 인쇄하기 위한 d를 설계하라.
# 단, 함수 호출은 반드시 주어진 코드를 사용해야 한다.
# def print_profile(n, h, w) :
#     print('name =', n)
#     print('weight =', w)
#     print('height =', h)

# x = input().split()
# d = # 코드 작성
# print_profile(**d)


# 입력 예시
# kim 180 92
# 출력 예시
# name = kim
# weight = 92
# height = 180

# 답
# def print_profile(n, h, w) :
#     print('name =', n)
#     print('weight =', w)
#     print('hight =', w)
 
# x = input().split()
# d = {'n':x[0], 'h':x[1], 'w':x[2]}
# print_profile(**d)
# -----------------------------------------------------------------------------------------------------
# 전달된 문자열 s의 시작과 끝에 전달된 문자열 x를 추가시킨 문자열을 리턴하는 func 함수를 설계하라.
# 단, x를 전달하지 않을 경우는 시작과 끝에 *를 추가한다.
# 아래 템플릿 코드를 사용하되 주어진 코드는 변경하면 안됨
# # 함수 작성

# # 아래 코드는 수정하지 말 것
# s, x = input().split()
# print(func(s, x))
# print(func(s))

# 입력 예시
# kim %%%
# 출력 예시
# %%%kim%%%
# *kim*

# 답
# def func(s, x = '*') :
#     return x + s + x
 
# s, x = input().split()
# print(func(s, x))
# print(func(s))
# -----------------------------------------------------------------------------------------------------
# 다음에 요구하는 함수를 설계하라

# 함수 이름은 add_item으로 하며 다음과 같은 3개의 parameter를 갖는다
# c: data를 추가할 컨테이너(list)를 받으며 반드시 전달 받아야 한다
# d: list c에 추가할 데이터를 받으며 반드시 전달 받아야 한다
# position: keyword only parameter이며 d를 추가할 c의 index 번호를 받는다 
# 단, position은 함수 호출시 생략 가능하며 생략시에는 제일 앞(index 0번)에 추가하도록 한다

# 다음 템플릿 코드를 이용하여 코드를 설계하고 동작을 검증한다
# 단, 채점시스템 자동 채점을 위하여 오류가 발생하는 부분은 제거한 후 제출하여야 한다
#  def add_item(          ) : # parameter 작성
#     # 코드 작성

# print(add_item([1,2,3,4], 100))
# print(add_item([1,2,3,4], 200, position = 1))

# 입력 예시
# 없음
# 출력 예시
# [100, 1, 2, 3, 4]
# [1, 200, 2, 3, 4]

# 답
# def add_item(c, d, *, position = 0): # parameter 작성
#     c.insert(position, d)
#     return c
 
# print(add_item([1,2,3,4], 100))
# print(add_item([1,2,3,4], 200, position = 1))
# -----------------------------------------------------------------------------------------------------
# 두 사람이 가위 바위 보를 한다.
# 두 사람의 낸 결과가 공백으로 구분되어 한 줄에 입력된다.
# 단, 가위는 scissors, 바위는 rock, 보는 paper로 입력된다.
# 이때 두 사람 중 누가 이겼는지를 판정하여 결과를 인쇄하라.
# 만약 앞 사람이 이겼으면 -1, 뒷 사람이 이겼으면 1을 비겼으면 0을 인쇄한다.

# (예1) scissors rock => 바위가 이기므로 1 인쇄
# (예2) paper rock => 보가 이기므로 -1 인쇄
# (예3) paper paper => 비겼으므로 0 인쇄

# 입력 예시
# scissors rock
# 출력 예시
# 1

# 답
# d = {'scissors':0, 'rock':1, 'paper':2}
# r = {0:0, -1:1, -2:-1, 1:-1, 2:1}
 
# x, y = input().split()
# print(r[d[x] - d[y]])
 
# ##d = {'scissors':0, 'rock':1, 'paper':2}
# ##r = {(0,0):0,(0,1):1,(0,2):-1,(1,0):-1,(1,1):0,(1, 2):1,(2,0):-1,(2,1):-1,(2,2):0}
# ##
# ##x, y = input().split()
# ##print(r[(d[x], d[y])])
# -----------------------------------------------------------------------------------------------------
# 파이썬의 round 함수는 실수를 정수로 만들지만 소수부가 0.5일 경우 짝수값이 되도록 정수화 한다.
# 내장 모듈은 math 모듈의 ceil 함수는 무조건 올림, floor 함수는 무조건 내림을 수행하는 함수이다.
# 반면에 trunc 함수의 경우 양수일 경우는 floor 함수처럼 음수일 경우는 ceil 함수처럼 동작하여 0에 가까운 정수로 만든다.
# 아래 코드를 실행하여 math 모듈의 올림, 버림 함수의 동작을 이해하여 보자
# import math

# print(math.ceil(345.5), math.ceil(345.51), math.ceil(345.6))
# print(math.floor(345.5), math.floor(345.51), math.floor(345.49))
# print(math.trunc(345.5), math.trunc(345.51), math.trunc(345.49))

# print(math.ceil(-345.5), math.ceil(-345.51), math.ceil(-345.6))
# print(math.floor(-345.5), math.floor(-345.51), math.floor(-345.49))
# print(math.trunc(-345.5), math.trunc(-345.51), math.trunc(-345.49))
# 양의 실수값을 입력받으면 반올림한 정수를 반환하는 함수 round_half_up 함수를 설계하라 
# 단, 음수 실수값에 대하여는 고려하지 않는것으로 한다. 
# 아래 템플릿 코드를 사용하여 설계하되 주어진 코드는 수정하지 않아야 한다. 
# def round_half_up(x) :
#     # 코드 작성 

# print(round_half_up(float(input()))) 

# 입력 예시
# 346.5
# 출력 예시
# 347

# 답
# def round_half_up(x) :
#     return int(x + 0.5)
 
# print(round_half_up(float(input())))
# -----------------------------------------------------------------------------------------------------
# 입력된 값이 짝수이면 Even 홀수이면 Odd를 인쇄하는 함수 func를 설계하라

# def func(a):
#     # 코드 설계

# func(10)
# func(11)
# func(-10)
# func(-11) 

# 입력 설명
# 없음
# 출력 설명
# 짝수이면 Even 홀수이면 Odd를 인쇄
# 입력 예시
# 없음
# 출력 예시
# Even
# Odd
# Even
# Odd

# 답
# def func(a):
#     print('Odd' if (a % 2) else 'Even')
 
# func(10)
# func(11)
# func(-10)
# func(-11)
# -----------------------------------------------------------------------------------------------------
# 입력 받은 학생 이름이 우리반 학생인지 체크하는 함수를 설계하라 
# 함수 이름은 student_check로 하며 tuple 하나와 str 하나를 입력 받는다
# 입력 받은 tuple에는 우리 반 학생들의 이름이 저장되어 있다
# 입력 받은 str에는 우리 반 학생인지 체크할 학생의 이름이 저장되어 있다
# 이 학생이 우리 반 학생이 맞으면(명단에 있으면) YES 아니면 NO를 리턴하라
# 절대 함수 안에서는 결과를 인쇄하면 안되고 결과를 YES, NO 문자열로 리턴해야 한다
# 다음과 같은 코드를 작성하여 설계한 함수를 검증한다
# 키보드로 문자열 하나를 s로 입력 받는다
# 템플릿에 있는 tuple t와 입력 받은 문자열 s를 함수 student_check에 전달한다
# 함수의 리턴 결과를 인쇄한다

# def student_check(t, s) :
#     # 코드 작성

# t = ('kim', 'lee', 'park', 'kang', 'song', 'lew', 'moon')
# s = input()
# print(student_check(t, s))

# 입력 예시
# kang
# 출력 예시
# YES

# 답
# def student_check(t, s) :
#     return 'YES' if s in t else 'NO'
 
# t = ('kim', 'lee', 'park', 'kang', 'song', 'lew', 'moon')
# s = input()
 
# print(student_check(t, s))
# -----------------------------------------------------------------------------------------------------
# 먼저 다음과 같이 동작하는 함수 func를 설계한다

# 1. 두 정수 값 m, n을 받는다
# 2. n은 0 ~ 9 범위이 값이다.
# 3. m의 끝자리 값(조)이 n과 같으면 YES를 다르면 NO를 리턴한다

# 다음 func 함수의 동작을 검증하기 위하여 다음 코드를 설계한다.

# 1. 두 정수 값 m, n을 키보드로 입력 받는다.
# 2. n 값이 0~9 범위가 아니면 FAULT를 출력하고 종료한다.
# 3. n 값이 0~9 범위가 맞으면 func 함수에 입력받은 m, n 두 수를 전달하여 호출한다.
# 4. func의 리턴을 인쇄한다.

# 즉, n 값의 범위를 확인한 후 0~9 사이가 아니면 바로 FAULT 인쇄하고 맞으면 func(m, n)으로 호출한 뒤 리턴을 인쇄한다.

# 입력 설명
# 공백으로 분리된 두 수 m과 n
# 출력 설명
# n이 0~9 범위가 아니면 FAULT 출력
# n이 0~9 범위가 맞으면 m의 끝자리 값이 n과 같으면 YES 출력 아니면 NO 출력
# 단, FAULT는 메인 코드에서 확인 및 인쇄를 진행하고
# YES와 NO는 func 함수의 리턴을 받아서 인쇄하는 것임
# 입력 예시
# 123456 3
# 출력 예시
# NO

# 답
# def func(m, n):
#     return 'YES' if ((m % 10) == n) else 'NO'
 
# m, n = map(int, input().split())
# print(func(m, n)) if (0 <= n <= 9) else print('FAULT')
# -----------------------------------------------------------------------------------------------------
# 키보드로 공백으로 분리된 n개의 정수들이 입력된다.
# 이들 중에서 모든 값들이 0으로만 되어 있는 경우 ZERO를 인쇄하고 그렇지 않으면 PASS를 인쇄하라.

# 입력 예시
# 0 0 0 0 0 0
# 출력 예시
# ZERO

# 답
# n = map(int, input().split())
# print('PASS' if any(n) else 'ZERO')
 
# -----------------------------------------------------------------------------------------------------
# 아래 사용자 함수로 설계한 f1~f4와 동일한 결과가 출력되도록 람다식을 이용한 함수를 설계하라
# (l1~l4에 f1~f4에 대응하는 람다식을 작성한다)

# a = 10

# def f1() : print(1)
# def f2() : print(a + 1)
# def f3(x, y) : print(max(x, y))
# def f4(x, y) : return x + y

# f1()
# f2()
# f3(5, 10)
# print(f4(5, 10))
# 아래 템플릿 코드를 사용한다

# a = 10

# l1 = lambda : print(1)
# l2 = 
# l3 = 
# l4 = 

# l1()
# l2()
# l3(5, 10)
# print(l4(5, 10))


# 입력 설명
# 없음
# 출력 설명
# 사용자 함수로 설계한 f1~f4를 실행한 결과와 동일한 출력
# 1
# 11
# 10
# 15 
# 입력 예시
# 없음
# 출력 예시
# 1
# 11
# 10
# 15

# 답
# a = 10
 
# l1 = lambda : print(1)
# l2 = lambda : print(a + 1)
# l3 = lambda x, y : print(max(x, y))
# l4 = lambda x, y : x + y
 
# l1()
# l2()
# l3(5, 10)
# print(l4(5, 10))
# -----------------------------------------------------------------------------------------------------
# 다음 함수의 기능 lambda 식을 이용하여 재설계하라
# if ~ else 식은 문장이 아니라 수식이므로 lambda에 사용이 가능하다

# def func(x) :
#     return 'EVEN' if not x % 2 else 'ODD'
# 다음 템플릿을 사용하라

# n = int(input())

# f = # 코드 설계

# print(f(n))

# 입력 설명
# 정수 하나가 입력된다
# 출력 설명
# 짝수면 EVEN, 홀수면 ODD가 인쇄된다
# 입력 예시
# 100
# 출력 예시
# EVEN

# 답
# n = int(input())
# f = lambda x : 'EVEN' if not x % 2 else 'ODD'
# print(f(n))
# -----------------------------------------------------------------------------------------------------
# 다음 코드의 함수 comp1, comp2, comp3를 lambda로 구현하라
# 박스 부분에 comp1 ~ comp3에 해당하는 역할의 함수를 변경하면 된다
# ## def comp1(x) : return x[0]
# ## def comp2(x) : return x[1]
# ## def comp3(x) : return x[1], x[2]
    
# t = (('banana', 500, 'yellow'), ('apple', 600, 'red'), ('kiwi', 500, 'brown'))

# print( min(t, key =                              ) ) # key = comp1 기능 
# print( min(t, key =                              ) ) # key = comp2 기능
# print( min(t, key =                              ) ) # key = comp3 기능


# 입력 예시
# 없음
# 출력 예시
# ('apple', 600, 'red')
# ('banana', 500, 'yellow')
# ('kiwi', 500, 'brown')

# 답
# t = (('banana', 500, 'yellow'), ('apple', 600, 'red'), ('kiwi', 500, 'brown'))
 
# print( min(t, key = lambda x : x[0] ) ) 
# print( min(t, key = lambda x : x[1] ) ) 
# print( min(t, key = lambda x : (x[1], x[2]) ) ) 
# -----------------------------------------------------------------------------------------------------
# 다음 dict에서 가격을 기준으로 최대, 최소 item을 찾아 인쇄하라
# min(), max()함수의 key옵션에 lambda를 활용하여 구현한다
# (힌트) d.items()[0], d.items()[1], d.items()[2]가 순차적으로 key 함수로 전달된다
# d = {'apple':1500, 'orange':500, 'banana':100, 'kiwi':700}

# # 코드 작성

# print('min =', min_item, 'max =', max_item)

# 입력 예시
# 없읍
# 출력 예시
# min = ('banana', 100) max = ('apple', 1500)

# 답
# d = {'apple':1500, 'orange':500, 'banana':100, 'kiwi':700}
 
# min_item = min(d.items(), key = (lambda x : x[1]))
# max_item = max(d.items(), key = (lambda x : x[1]))
 
# print('min =', min_item, 'max =', max_item)
# -----------------------------------------------------------------------------------------------------
# 친구들에게 와인을 대접하기로하고 마트에 와인을 구입하러 갔다.
# 한 회사 제품을 구입하기로 했는데 와인 병에는 고유의 제조 코드가 적혀있다.
# 이 제품 코드는 맨 앞과 맨 뒤에 영문자가 있고 가운데 6자리에 제조일이 적혀있다.
# 예를들어 a200912x 일 경우 제조일은 20년 9월 12일이 된다.
# n개의 와인 제조번호가 공백으로 구분되어 한줄로 입력이 된다.
# 이들 와인 중 제조일이 가장 오래된 와인의 코드를 인쇄하라.
# 단, 제조일이 같을 경우 맨 앞의 영문 코드가 가장 빠른것을 선택한다.
# 맨 앞 영문 코드도 같을 경우는 맨 뒤의 영문코드가 가장 빠른것을 선택한다.

# 입력 예시
# a201811x b201810t s190909n t190908y a190910z a190908y
# 출력 예시
# a190908y

# 답
# x = input().split()
# print(min(x, key = lambda s : s[1:-1] + s[0] + s[-1]))
# -----------------------------------------------------------------------------------------------------
# 튜플 형식의 문자열로 작성된 개인 정보(이름, 나이, 몸무게)가 한줄에 입력된다.
# 입력되는 문자열은  예는 다음과 같다.
# d = (('kim', 20, 74), ('park', 22, 71), ('lee', 19, 80))
# 이 문자열을 입력 받아서 가장 나이가 적은 사람의 이름을 인쇄하라. 
# 단, 나이가 같을 경우 몸무게가 적은 사람을 선택한다.
# 몸무게도 같을 경우는 목록의 앞에 있는 사람을 선택한다.
# (힌트) 문자열로 입력되는 튜플은 exec로 입력 받으면 된다.

# 입력 예시
# d = (('kim', 20, 74), ('park', 22, 71),('lee', 19, 79),('moon', 19, 80))
# 출력 예시
# lee

# 답
# exec(input())
# print(min(d, key = lambda x : (x[1], x[2]))[0])
# -----------------------------------------------------------------------------------------------------
# 창고에 뒤죽박죽 되어 있는 제품들을 정리하려고 한다.
# 제품의 목록은 튜플 형식의 문자열로 입력된다.
# 단, 튜플 형식은 아래 예와 같이 다중 튜플 형식의 문자열로 입력된다.
# (입력 문자열 예) (('x720', 2012, 6), ('x730', 2012, 8))
# 튜플의 데이터는 모델명, 제조년도, 생산월 순서로 되어 있다.
# 이들을 창고에 정렬하여 저장한뒤 결과를 튜플로 인쇄하라.
# 정렬 기준은 (1)제조연도가 빠른것 우선하되 같으면 (2)생산월이 늦은 것이 우선, 같으면 (3)현재 순서 우선으로 한다.

# 입력 예시
# (('x720', 2012, 6), ('x730', 2012, 8), ('y6200', 2013, 1), ('a210', 2012, 8))
# 출력 예시
# (('x730', 2012, 8), ('a210', 2012, 8), ('x720', 2012, 6), ('y6200', 2013, 1))

# 답
# exec('x = ' + input())
# print(tuple(sorted(x, key = lambda x : (x[1], -x[2]))))
 
# #x = eval(input())
# #print(tuple(sorted(x, key = lambda x : (x[1], -x[2]))))
# -----------------------------------------------------------------------------------------------------
# 튜플 x에 들어있는 숫자들 중 3의 배수만 분류하여 튜플 y에 저장하는 코드를 설계하라
# 반드시 filter 함수와 lambda 함수를 이용하여 설계하라.

# 다음 코드를 활용하여 작성한다.

# x = (1,2,3,6,8,9,10,24,19,21,30,41,50,90)

# y = # 코드 작성

# print(y)

# 입력 설명
# 없음
# 출력 설명
# x에서 3의 배수값만 분류된 결과(튜플로 인쇄)
# 입력 예시
# 없음
# 출력 예시
# (3, 6, 9, 24, 21, 30, 90)

# 답
# x = (1,2,3,6,8,9,10,24,19,21,30,41,50,90)
 
# y = tuple(filter((lambda a: True if not (a % 3) else False), x))
# #y = tuple(filter((lambda a: not (a % 3)), x))
# #y = tuple(filter((lambda a: (a % 3) == 0), x))
 
# print(y)
# -----------------------------------------------------------------------------------------------------
# x = (1,2,3,6,8,9,10,24,19,21,30,41,50,90)
 
# y = tuple(filter((lambda a: True if not (a % 3) else False), x))
# #y = tuple(filter((lambda a: not (a % 3)), x))
# #y = tuple(filter((lambda a: (a % 3) == 0), x))
 
# print(y)

# 입력 설명
# 문장이 한 줄로 입력된다
# 출력 설명
# 단어들 중 글자수가 3 이상인 단어들만 선별하여 한 줄로 인쇄한다
# 입력 예시
# I am a python programmer too
# 출력 예시
# python programmer too

# 답
# x = filter(lambda n : len(n) >= 3, input().split())
# print(*x)
# -----------------------------------------------------------------------------------------------------
# 첫 줄에 정수 m이 입력된다.
# 둘째줄에 n개의 정수가 공백으로 분리되어 한 줄로 입력된다.
# 단, 입력된 정수의 개수가 m개보다 적을 경우 ERROR를 인쇄하고 프로그램을 종료한다.
# 입력된 정수의 개수가 m개 이상일 경우는 그 값들중에서 홀수인 수들의 합을 인쇄한다.

# 입력 예시
# 5
# 1 2 3 4 5 6 7 8 9
# 출력 예시
# 25

# 답
# m = int(input())
# n = tuple(map(int, input().split()))
# print('ERROR' if len(n) < m else sum(filter(lambda x :  x % 2, n)))
 
# -----------------------------------------------------------------------------------------------------
# 입력된 모든 실수 값들을 정수화(round)후 제곱한 값을 구하라
# 한번의 map 함수 사용으로 설계가 가능한가? 가능하다면 map은 한 번만 사용하라

# 입력 설명
# 실수 값들이 공백으로 분리되어 한 줄로 입력된다
# 출력 설명
# 입력된 실수값들을 정수화(round)한 후 제곱한 결과를 한줄로 공백으로 분리하여 인쇄한다
# 입력 예시
# 12.3  3.4  -5.18  4  -20.1
# 출력 예시
# 144 9 25 16 400

# 답
# print(*map(lambda x : round(float(x)) ** 2, input().split()))

# -----------------------------------------------------------------------------------------------------
# 입력된 단어 중 ‘a’로 시작하는 단어의 앞 글자 ‘a’를 ‘*’로 변환하라
# (힌트) 먼저 ‘a’로 시작하는 단어를 선별(filter)하고 첫 글자를 ‘*’로 변환(map)한다

# 입력 설명
# 공백으로 분리된 단어가 한 줄로 입력된다
# 출력 설명
# a로 시작하는 단어의 첫 글자 a를 *로 변경한뒤 공백으로 분리하여 한줄로 인쇄한다
# 입력 예시
# apple  and love a will aaa a! xxx
# 출력 예시
# *pple *nd * *aa *!

# 답
# print(*map(lambda x : '*' + x[1:], filter(lambda x : x[0] == 'a', input().split())))

# -----------------------------------------------------------------------------------------------------
# 다음 코드를 map과 lambda를 이용하여 재설계하라

# image = (0x1D, 0x13, 0x25, 0x13, 0x27, 0x45, 0x08, 0xAB, 0x3F)

# r, g, b = image[0::3], image[1::3], image[2::3]
# ar, ag, ab = map(round, (sum(r)/len(r), sum(g)/len(g), sum(b)/len(b)))

# print("0x%x 0x%x 0x%x" % (ar, ag, ab))

# 입력 예시
# 없음
# 출력 예시
# 0x13 0x4c 0x38

# 답
# image = (0x1D, 0x13, 0x25, 0x13, 0x27, 0x45, 0x08, 0xAB, 0x3F)
 
# r, g, b = map((lambda x: image[x::3]), range(0,3))
# ar, ag, ab = map((lambda x: round(sum(x)/len(x))), (r, g, b))
 
# #ar, ag, ab = map((lambda x: round(sum(x)/len(x))), map((lambda x: image[x::3]), range(0,3)))
 
# print("0x%x 0x%x 0x%x" % (ar, ag, ab))
# -----------------------------------------------------------------------------------------------------
# n개의 문자열이 공백으로 분리되어 한 줄에 입력된다.
# 이들 문자열 중에서 시작이 소문자로 시작하는 경우 문자열 전체를 대문자로 만들고
# 대문자로 변환한 문자열들의 개수를 인쇄하고
# 다음줄에 대문자로 변환된 문자열들을 한 줄로 인쇄하라.
# 단, 대문자로 변환할 단어가 하나도 없는경우 개수는 0을 인쇄하고
# 문자열의 내용 대신 NONE을 인쇄하라.

# 입력 예시
# willTek Korea pyThon 1abcd x1234 Yabc sun Moon
# 출력 예시
# 4
# WILLTEK PYTHON X1234 SUN

# 답
# y = filter(lambda x : 'a' <= x[0] <= 'z', input().split())
# z = tuple(map(lambda x : x.upper(), y))
# s = len(z)
# print(s)
# print(*z) if s != 0 else print('NONE')
 
# ##y = filter(lambda x : 'a' <= x[0] <= 'z', input().split())
# ##z = tuple(map(str.upper, y))
# ##s = len(z)
# ##print(s)
# ##print(*z) if s != 0 else print('NONE')
# -----------------------------------------------------------------------------------------------------
# tuple t에 저장된 각 아이템들을 제곱한 후 리스트에 저장하는 코드를 설계하라
# 인쇄 결과는 반드시 list로 출력되어야 한다
# 단, lambda와 map을 활용하여 설계하라

# t = (1, 3, 7, 2, 6, 8)
# l = # 코드 설계
# print(l)

# 입력 예시
# 없음
# 출력 예시
# [1, 9, 49, 4, 36, 64]

# 답
# t = (1, 3, 7, 2, 6, 8)
 
# l = list(map(lambda x : x ** 2, t))
 
# print(l)
# -----------------------------------------------------------------------------------------------------
# tuple t에 저장된 각 아이템들을 제곱한 후 리스트에 저장하는 코드를 설계하라
# 인쇄 결과는 반드시 list로 출력되어야 한다
# 단, generator expression을 활용하라
# t = (1, 3, 7, 2, 6, 8)
# l = # 코드 설계
# print(l)

# 입력 예시
# 없음
# 출력 예시
# [1, 9, 49, 4, 36, 64]

# 답
# t = (1, 3, 7, 2, 6, 8)
 
# l = list(x ** 2 for x in t)
# #l = list((x ** 2 for x in t))
 
# print(l)
# -----------------------------------------------------------------------------------------------------
# 첫 줄에 제품 인상율이 % 단위로 실수로 입력된다.
# 둘째 줄에 n개의 제품의 가격이 정수로 공백으로 분리되어 입력된다.
# 이들 가격을 일괄적으로 인상율만큼 인상한 결과를 인쇄하라.
# 단, 반드시 generator로 구현해야 하며 결과는 정수로 round되어야 한다.

# 입력 예시
# 8.5
# 1800 2400 810 9800 12540 24387
# 출력 예시
# 1953 2604 879 10633 13606 26460

# 답
# r = 1 + float(input()) / 100
# y = (round(int(x) * r) for x in input().split())
# print(*y)
# -----------------------------------------------------------------------------------------------------
# n개의 정수가 공백으로 분리되어 한 줄에 입력된다.
# 다음 줄에는 걸러낼 숫자의 기준값 r이 정수로 입력된다.
# n개의 정수들 중에서 기준값 r보다 작은 값들을 제외한 모든 수들을 2배로 만든후 인쇄하라
# 단, 반드시 generator를 사용하여 구현해야 한다.

# 입력 예시
# 12 392 99 88 77 25 63 50
# 50
# 출력 예시
# 784 198 176 154 126 100

# 답
# n = map(int, input().split())
# r = int(input())
# print(*(x * 2 for x in n if x >= r))
# -----------------------------------------------------------------------------------------------------
# 입력된 단어 중 ‘a’로 시작하는 단어의 앞 글자 ‘a’를 ‘*’로 변환하는 다음 코드를 generator를 사용하여 재설계 하라

# f = filter(lambda x : x[0] == 'a', input().split())
# y = map(lambda x : '*' + x[1:], f)
# print(*y)
# 아래 템플릿을 사용하라

# y = # 코드 작성
# print(*y)

# 입력 설명
# 공백으로 분리된 단어가 한 줄로 입력된다
# 출력 설명
# a로 시작하는 단어의 첫 글자 a를 *로 변경한뒤 공백으로 분리하여 한줄로 인쇄한다
# 입력 예시
# apple  and love a will aaa a! xxx
# 출력 예시
# *pple *nd * *aa *!

# 답
# y = ('*' + x[1:] for x in input().split() if x[0] == 'a')
# print(*y)
# -----------------------------------------------------------------------------------------------------
# 극장 좌석에 좌석번호표를 부착하려고 한다.
# 극장 좌석의 열 수(c)와 행 수(r)가 공백으로 분리된 정수로 한 줄에 입력된다.
# 열 수는 최대 10이고 행 수는 최대 20이다.
# 만약 열수 c가 3이면 열 번호는 A, B, C 3개로 구성된다.
# 만역 행수 r이 4이면 행 번호는 1~4로 구성된다.
# 따라서 제작하여야 하는 12개의 스티커는 A1, A2, A3, A4, B1, B2, B3, B4, C1, C2, C3, C4와 같이 생성되어야 한다.
# 스티커 번호표를 공백으로 분리하여 인쇄하라 
# 단. A1 A2 ... An B1 B2 ... Bn 순으로 인쇄되어야 한다.
# 반드시 generator를 이용하여야 한다.

# 입력 예시
# 4 5
# 출력 예시
# A1 A2 A3 A4 A5 B1 B2 B3 B4 B5 C1 C2 C3 C4 C5 D1 D2 D3 D4 D5

# 답
# m, n = map(int, input().split())
# z = (chr(ord('A') + x) + str(y) for x in range(m) for y in range(1, n + 1))
# print(*z)
 
# ##m, n = map(int, input().split())
# ##c = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[:m]
# ##z = (x + str(y) for x in c for y in range(1, n + 1))
# ##print(*z)
 
# -----------------------------------------------------------------------------------------------------
# 최대 10개의 귤중에서 팔 수 있는 귤과 개수를 인쇄하는 문제이다.
# n개의 귤이 담긴 상자가 있다. 
# 차례대로 상자에 담긴 귤을 꺼내어 팔 수 있는 큰 귤(10이상)은 판매할 상자에 담고, 팔 수 없는 작은 귤은 먹기로 했다.
# 큰 귤은 10이상의 값을 의미하고 팔 수 없는 작은 귤은 10미만인 값을 의미한다.
# 팔 수 있는 큰 귤을 상자에 담을 경우 입력 받은 순서대로 담아 간다
# n개중에서 판매할 상자에 담은 귤과 개수를 인쇄하시오. 

# 단, lambda와 filter 함수를 사용하시오 

# 입력 설명
# 첫줄에 n을 입력 받는다. ( 5<=n<=10)
# 둘째줄에 n개의 정수를 입력받는다. 정수는 1이상 100이하의 정수이다.
# 출력 설명
# n개중에서 판매할 상자에 담은 귤의 개수와 상자에 담긴 귤을 인쇄한다. 단 귤을 1개도 못 담는 경우는 없다.
# 입력 예시
# 5
# 8 10 25 4 30
# 출력 예시
# 3
# 10 25 30 

# 답
# n = int(input())
# box = list(filter(lambda x: x>=10, map(int, input().split())))
# print(len(box))
# print(*box) 
 
# -----------------------------------------------------------------------------------------------------
# 최대 10개의 귤중에서 팔 수 있는 귤과 개수를 인쇄하는 문제이다.
# n개의 귤이 담긴 상자가 있다. 
# 차례대로 상자에 담긴 귤을 꺼내어 팔 수 있는 큰 귤(10이상)은 판매할 상자에 담고, 팔 수 없는 작은 귤은 먹기로 했다.
# 큰 귤은 10이상의 값을 의미하고 팔 수 없는 작은 귤은 10미만인 값을 의미한다.
# 팔 수 있는 큰 귤을 상자에 담을 경우 입력 받은 순서대로 담아 간다
# n개중에서 판매할 상자에 담은 귤과 개수를 인쇄하시오. 

# 단, list comprehension을 사용하시오 

# 입력 설명
# 첫줄에 n을 입력 받는다. ( 5<=n<=10)
# 둘째줄에 n개의 정수를 입력받는다. 정수는 1이상 100이하의 정수이다.
# 출력 설명
# n개중에서 판매할 상자에 담은 귤의 개수와 상자에 담긴 귤을 인쇄한다. 단 귤을 1개도 못 담는 경우는 없다.
# 입력 예시
# 5
# 8 10 25 4 30
# 출력 예시
# 3
# 10 25 30 

# 답
# n = int(input())
# l = [x for x in map(int, input().split()) if x >= 10]
# print(len(l))
# print(*l) 
 
# -----------------------------------------------------------------------------------------------------
# 첫 줄에 학생의 인원수 n이 정수로 입력된다.
# 이후 n줄에 걸쳐서 학생 한 명의 정보가 ID와 이름이 공백으로 분리되어 입력되며
# 이후 찾고자하는 학생의 ID가 입력이 된다.
# 입력 받은 ID에 맞는 학생의 이름을 인쇄하는 코드를 설계하라

# 입력 예시
# 5
# 1001 kim
# 1002 lee
# 2001 park
# 2002 song
# 3001 moon
# 2002
# 출력 예시
# song

# 답
# n = int(input())
# x = [input().split() for i in range(n)]
# print(dict(x)[input()])
# -----------------------------------------------------------------------------------------------------
# 첫 줄에 정수 n이 입력된다.
# 둘째줄부터 n줄에 걸쳐서 n개의 정수가 공백으로 분리되어 입력된다.
# 이 값들을 입력받아서 2차원의 n*n 리스트를 생성하여 인쇄하라.
# 출력은 아래 출력 예시와 동일한 형식이 되게 하라.

# 입력 예시
# 5
# 1 2 3 4 5
# 10 20 30 40 50
# -1 -2 -3 -4 -5
# 3 5 7 9 11
# 8 6 4 2 0
# 출력 예시
# [1, 2, 3, 4, 5]
# [10, 20, 30, 40, 50]
# [-1, -2, -3, -4, -5]
# [3, 5, 7, 9, 11]
# [8, 6, 4, 2, 0]

# 답
# n = int(input())
# y = [[int(x) for x in input().split()] for i in range(n)]
# print(*y, sep='\n')
# -----------------------------------------------------------------------------------------------------
# 첫 줄에 학급수 n이 정수로 입력된다.
# 다음줄 부터 n줄에 걸쳐서 반 학생들의 이름이 입력된다.
# 가장 인원이 적은 반은 몇 반인가?
# 단, 반 번호는 1번부터 연속적으로 부여된다.
# 단, 인원이 같을 경우 작은 반 번호를 인쇄하라.

# 입력 예시
# 3
# kim lee park
# kim song moon no lew
# park kim lew
# 출력 예시
# 1

# 답
# n = int(input())
 
# x = [ len(input().split()) for i in range(n) ]
# print(x.index(min(x)) + 1)
# -----------------------------------------------------------------------------------------------------
# zip 함수로 3*4 배열을 4*3 배열로 변환시킨 다음 코드를 list comprehension을 활용하여 재설계 하라
# 결과는 반드시 2차원 리스트로 생성되어야 한다.

# a = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]

# # 이 코드를 변경한다
# b = list(map(list, zip(*a))) 

# print(type(b), b)

# 입력 예시
# 없음
# 출력 예시
# <class 'list'> [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]

# 답
# a = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
# b = [[y[x] for y in a] for x in range(len(a[0]))]
 
# print(type(b), b)
 
# -----------------------------------------------------------------------------------------------------
# 2의 배수면 2, 3의 배수면 3, 5의 배수면 5를 2,3,5 배수가 아니면 0을 반환하는 func 함수를 설계하라
# 단, 2와 3 공통 배수이면 2을 3과 5의 공통 배수이면 3을 2,3,5의 공통 배수이면 2를 리턴한다.

# def compare(num):

# #코드 작성

# print('3 =>', compare(3))
# print('62 =>', compare(62))
# print('25 =>', compare(25))
# print('157 =>', compare(157))

# 입력 예시
# 없음
# 출력 예시
# 3 => 3
# 62 => 2
# 25 => 5
# 157 => 0

# 답
# def compare(num):
#     if not num % 2 : return 2
#     if not num % 3 : return 3
#     if not num % 5 : return 5
#     return 0
 
# print('3 =>', compare(3))
# print('62 =>', compare(62))
# print('25 =>', compare(25))
# print('157 =>', compare(157))
# -----------------------------------------------------------------------------------------------------
# 다음 성적 기준에 따라 점수를 넣으면 학점을 리턴하는 함수를 설계하라

# 1. 정수(성적)를 하나 입력 받는다.
# 2. 점수가 90점 이상은  A, 80점 이상 B, 70점 이상 C, 60점 이상 D, 60점 미만 F로 처리한다.
# 3. 입력 받은 성적에 해당하는 학점을 리턴한다.
# 4. 입력된 점수가 100점 초과 또는 0점 미만시 “ERROR”를 반환하도록 한다

# 검증을 위한 코드는 다음과 같이 설계된다.
# 아래 코드를 복사하고 func 함수를 설계한다.
# 단, if문을 사용하여 설계하라

# def func(n):
#     # 코드 설계

# n = int(input())
# print(func(n))

# 입력 설명
# 0 ~ 100 사이의 정수
# 출력 설명
# 점수에 따른 성적
# 입력 예시
# 90
# 출력 예시
# A

# 답
# def func(n):
#     if n > 100 or n < 0 : return 'ERROR'
#     if n >= 90 : return 'A'
#     if n >= 80 : return 'B'
#     if n >= 70 : return 'C'
#     if n >= 60 : return 'D'
#     else : return 'F'
 
# n = int(input())
# print(func(n))
# -----------------------------------------------------------------------------------------------------
# 문자열이 입력되면 해당 문자열의 글자수를 반환하고
# 정수가 입력되면 제곱한 결과를 반환하고
# 실수가 입력되면 round 시킨 정수를 반환하고
# 그외 타입일 경우는 'ERROR'를 리턴한다.
# 아래 주어진 템플릿을 이용하여 작성하라.
# def func(x) :
#    # 코드 작성
    
# t = ('kim', 'willtek', '1234', 1234, -3.14, ('python',), 'hello')
# x = map(func, t)
# print(*x)

# 입력 예시
# 없음
# 출력 예시
# 3 7 4 1522756 -3 ERROR 5

# 답
# def func(x) :
#     if isinstance(x, str) : return len(x)
#     if isinstance(x, int) : return x ** 2
#     if isinstance(x, float) : return round(x)
#     else : return 'ERROR'
     
# t = ('kim', 'willtek', '1234', 1234, -3.14, ('python',), 'hello')
# x = map(func, t)
# print(*x)
# -----------------------------------------------------------------------------------------------------
# 어느 주차장은 주차시간이 10분 미만이면 무료이며, 10분 이상 30분 이하는 500원이다. 또한 30분을 초과하여 주차를 하면
# 30분 요금에 30분 초과 분에 대한 요금을 10분에 300원씩을 더 받는다. 그리고 최대 주차요금은 한 대당 50,000원을 넘을 수
# 없다. 즉, 몇 분을 주차하여도(하루 초과하여도 무방) 최대 금액은 50,000원으로 계산한다. 예로 9분 주차하면 0원,
# 20을 주차하면 500원, 32분을 주차하면 800원이다. 분 단위의 주차 시간을 입력 받아 주차요금을 인쇄하는 코드를 작성하라.
# time = int(input())

# #코드 작성

# print(fee)

# 입력 설명
# 주차 총 시간을 분단위로 입력 받는다.
# 출력 설명
# 주차요금을 계산하여 출력한다.
# 입력 예시
# 32
# 출력 예시
# 800

# 답
# time = int(input())
 
# if time < 10 :
#     fee = 0
# elif time <= 30 :
#     fee = 500
# else :
#     time -= 30
#     fee = 500 + (time // 10) * 300
     
#     if time % 10 > 0 :
#         fee += 300
#     if fee > 50000 :
#         fee = 50000
 
# print(fee)

# -----------------------------------------------------------------------------------------------------
# 다음 코드의 동작을 분석하고 순수한 for 루프로 재설계하라
# # [1] filter와 lambda 활용

# n = int(input())
# box = list(filter(lambda x: x>=10, map(int, input().split())))
# print(len(box))
# print(*box) 

# # [2] list comprehension 활용

# n = int(input())
# l = [x for x in map(int, input().split()) if x >= 10]
# print(len(l))
# print(*l)

# [코드의 동작]
# 입력 n을 받고 다음 줄에 공백으로 분리된 n개의 정수를 받는다
# 이 n개의 정수 중 팔 수 있는 귤(값이 10 이상인 것)을 선별하여 list로 생성한다
# 팔 수 있는 귤을 선별한 개수와 목록을 인쇄하라  출력 예시 참조
# (힌트) 빈 list를 생성하고 append() 메서드를 활용한다

# n = int(input())
# x = map(int, input().split())
# box = []

# # 코드 작성

# print(len(box))
# print(*box) 


# 입력 예시
# 5
# 8 10 25 4 30
# 출력 예시
# 3
# 10 25 30

# 답
# n = int(input())
# x = map(int, input().split())
# box = []
 
# for i in x :
#     if i >= 10 :
#         box.append(i)
 
# print(len(box))
# print(*box) 
# -----------------------------------------------------------------------------------------------------
# 이차원 튜플 t가 다음과 같다.
# [튜플] t = ((1,2,3,4),(5,6,7,8),(9,10,11,12))
# 이 t의 행과 열을 바꿔 다음과 같이 인쇄되도록 이중 for 루프로 구현하라.
# 반드시 zip이나 comprehension을 사용하지 말고 이중 for 루프를 사용하여야 한다.
# [결과] 1 5 9 2 6 10 3 7 11 4 8 12

# 입력 예시
# 없음
# 출력 예시
# 1 5 9 2 6 10 3 7 11 4 8 12

# 답
# t = ((1,2,3,4),(5,6,7,8),(9,10,11,12))
 
# for i in range(len(t[0])) :
#     for j in range(len(t)) :
#         print(t[j][i], end = ' ')
# -----------------------------------------------------------------------------------------------------
# 첫 줄에 문자열 s가 입력된다.
# 둘째줄에는 찾고자 하는 패턴 문자열 t가 입력된다.
# 문자열 s에서 패턴 t 문자열이 몇번 나오는지 횟수를 인쇄하라.
# 예를 들어 s가 aaabb 이고 t가 aa이면 aa는 총 2번 존재한다.
# 즉, aaa는 aa 패턴이 2번 있는 것으로 인정된다.

# 입력 예시
# aaaabbbbaaaaccccaabbcc
# aa
# 출력 예시
# 7

# 답
# s = input()
# t = input()
# cnt = 0
 
# for i in range(len(s)-len(t)+1) :
#     if s[i:i+len(t)] == t :
#         cnt += 1
 
# print(cnt)
# -----------------------------------------------------------------------------------------------------
# n개의 정수가 저장된 list와 정수 하나를 전달 받으면
# list에서 해당 정수값을 완전히 제거한 결과 list를 반환하는 함수 remove를 설계하라.
# 다음 템플릿 코드를 사용하되 주어진 코드는 수정하지 않아야 함
# def remove(l, n) :
#      # 코드 작성

# l = [int(x) for x in input().split()]
# n = int(input())
# print(*remove(l, n))

# 입력 예시
# 1 30 -34 78 0 1 30 40 30 40 -1 0 78 1
# 30
# 출력 예시
# 1 -34 78 0 1 40 40 -1 0 78 1

# 답
# def remove(l, n) :
#      for i in range(l.count(n)) :
#          l.remove(n)
          
#      return l
 
# l = [int(x) for x in input().split()]
# n = int(input())
# print(*remove(l, n))
 
# ##def remove(l, n) :
# ##    p = 0
# ##    for i in range(l.count(n)) :
# ##        p = l.index(n, p)
# ##        del l[p]
# ##         
# ##    return l
# ##
# ##l = [int(x) for x in input().split()]
# ##n = int(input())
# ##print(*remove(l, n))
# -----------------------------------------------------------------------------------------------------
# 키 순서대로 자리 배치한 학급에 전학생이 왔다 자리를 찾아주자
# n개(n은 모른다고 가정) 정수가 오름차순으로 list a에 저장되어 있다
# 새로운 정수 m을 입력 받아서 이를 오름차순이 유지되도록 a에 삽입한다
# 단, sorted 함수나 list의 sort 메서드는 사용할 수 없다
# 그 외 메서드나 built-in 함수를 사용하는 것은 상관 없다
# 입력은 무한루프로 계속 받아서 삽입 후 a를 인쇄하여 결과를 확인한다
# 단, 0을 입력하면 프로그램을 종료한다.
# 아래 템플릿을 복사하여 작성하라.

# a = [1,4,7,10]

# while True:
#     m = int(input())
#     # 코드 작성
#     print(a)

# 입력 예시
# 8
# 0
# 출력 예시
# [1,4,7,8,10] 

# 답
# a = [1,4,7,10]
 
# while True:
#     m = int(input())
#     if(m == 0) :
#         break
#     for i in range(len(a)):
#         if a[i]>m:
#             a.insert(i, m)
#             break
#     else: a.append(m)
#     print(a)
# -----------------------------------------------------------------------------------------------------
# 다음과 같이 문자열에 포함된 공백을 조작하여 출력한다

# 1. 모든 문자열의 앞, 뒤 공백들(tab 포함)은 모두 제거한다
# 2. 문장 안 단어들 사이의 공백들(tab 포함)은 하나만 남긴다
# 3. 모든 문장들을 ‘\n’으로 연결된 하나의 문장으로 만들어서 변수 r에 저장
# 4. print에 r을 전달하여 문장들이 줄 바꿈되면서 인쇄 되도록 한다
# 다음 템플릿을 사용하여 코드를 작성하라

# s = ('   Willtek   python     ', 'Good  \t Morning~', '   Have a good day!!   ')

# # 코드 작성

# print(r)

# 입력 예시
# 없음
# 출력 예시
# Willtek python
# Good Morning~
# Have a good day!!

# 답
# s = ('   Willtek   python     ', 'Good    Morning~', '   Have a good day!!   ')
 
# r = '\n'.join([' '.join(x) for x in [x.split() for x in s]])
# print(r)

# -----------------------------------------------------------------------------------------------------
# 문장을 입력 받아 각 단어 별 개수를 구하라

# [입력 조건]
# 입력된 스트링은 글자의 제한은 없다. 즉 공백이나 ', ' 등도 입력 받을 수 있다
# 입력된 문장에서 각 단어 사이의 구분은 공백으로 한다
# 단어에는 공백을 제외한 단어들 만이 포함된다

# [입력 설명]
# 임의의 문장을 입력 받는다

# [출력 설명]
# 입력된 행 별로 각 단어들의 발생 빈도를 단어 기준 오름차순으로 출력한다 
# * 다음 템플릿 코드를 사용하라
# * 최종 결과를 변수 d에 저장하면 템플릿 코드에서 알아서 인쇄를 진행한다

# s = input().split()

# # 코드 작성

# print('\n'.join('{0} : {1}'.format(*x) for x in d))

# 입력 예시
# I AM DOG DOG DOG DOG A AM I
# 출력 예시
# A : 1
# AM : 2
# DOG : 4
# I : 2

# 답
# s = input().split()
# y = {x : s.count(x) for x in set(s)}
# d = sorted(y.items())
 
# print('\n'.join('{0} : {1}'.format(*x) for x in d))

# -----------------------------------------------------------------------------------------------------

